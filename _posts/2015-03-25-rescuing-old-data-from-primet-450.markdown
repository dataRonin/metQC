---
layout: post
title: "Rescuing Old Data From PRIMET 450"
date: 2015-03-25T13:51:38-07:00
---

The PRIMET sensor for relative humidity at 450 m (RELPRI01) is missing. Therefore, all daily measurements of relative humidity, dewpoint, and vpd from that height during the period between 2014-02-12 and now are invalid. We salvaged the data from the 15-minute (air temperature) and hourly (relative humidity) tables in PRIM_226_table115 and PRIM_226_table160 METDAT loggers. Note that AIRPRI01 was available at 450 m because it was calculate on a different instruction set (the 115 set). The method for getting the daily mean relative humidities and dewpoints was to get the hourly mean air temperature (from the four values in the hour), combine this with the hourly observed relative humidity, compute the dewpoint and vpd, and then find the mean daily air temperature, relative humidity, dewpoint, and vpd. The reason for computing the air temperature as well was to assess how well the daily values agreed with the hourly means. The graph below shows the daily-logged and hourly-means-averaged-over-a-day values for air temperature at 450 m. on PRIMET

<style>

</style>

<div id="fig_el8603943749964965113286983"></div>
<script>
function mpld3_load_lib(url, callback){
  var s = document.createElement('script');
  s.src = url;
  s.async = true;
  s.onreadystatechange = s.onload = callback;
  s.onerror = function(){console.warn("failed to load library " + url);};
  document.getElementsByTagName("head")[0].appendChild(s);
}

if(typeof(mpld3) !== "undefined" && mpld3._mpld3IsLoaded){
   // already loaded: just create the figure
   !function(mpld3){
       
       mpld3.draw_figure("fig_el8603943749964965113286983", {"axes": [{"xlim": [735276.0, 735655.0], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "days", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.16004153347975508], "rotation": -0.0, "id": "el860394380619088"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "air temperature in C", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.054939516129032251, 0.5], "rotation": -90.0, "id": "el860394380713168"}, {"v_baseline": "auto", "h_anchor": "start", "color": "#000000", "text": "daily air", "coordinates": "axes", "zorder": 2000003.0, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.65705015120967736, 0.1202380952380952], "rotation": -0.0, "id": "el860394380450512"}, {"v_baseline": "auto", "h_anchor": "start", "color": "#000000", "text": "hourly avg daily air", "coordinates": "axes", "zorder": 2000003.0, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.65705015120967736, 0.051785714285714268], "rotation": -0.0, "id": "el860394380072016"}], "zoomable": true, "images": [], "xdomain": [[2014, 1, 12, 0, 0, 0, 0.0], [2015, 1, 26, 0, 0, 0, 0.0]], "ylim": [-5.0, 25.0], "paths": [{"edgecolor": "#000000", "facecolor": "#FFFFFF", "edgewidth": 1.0, "pathcodes": ["M", "L", "L", "L", "L", "Z"], "yindex": 1, "coordinates": "axes", "dasharray": "10,0", "zorder": 2000001.0, "alpha": 1, "xindex": 0, "data": "data03", "id": "el860394380450000"}], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"color": "#000000", "alpha": 0.2, "dasharray": "2,2", "gridOn": true}, "fontsize": 12.0, "position": "bottom", "nticks": 6, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"color": "#000000", "alpha": 0.2, "dasharray": "2,2", "gridOn": true}, "fontsize": 12.0, "position": "left", "nticks": 7, "tickvalues": null}], "lines": [{"color": "#FF0000", "yindex": 1, "coordinates": "data", "dasharray": "10,0", "zorder": 2, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data01", "id": "el860394380758992"}, {"color": "#0000FF", "yindex": 2, "coordinates": "data", "dasharray": "10,0", "zorder": 2, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data01", "id": "el860394380447440"}, {"color": "#FF0000", "yindex": 1, "coordinates": "axes", "dasharray": "10,0", "zorder": 2000002.0, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data02", "id": "el860394380070544"}, {"color": "#0000FF", "yindex": 2, "coordinates": "axes", "dasharray": "10,0", "zorder": 2000002.0, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data02", "id": "el860394380072976"}], "markers": [], "id": "el860394377477776", "ydomain": [-5.0, 25.0], "collections": [], "xscale": "date", "bbox": [0.125, 0.20000000000000007, 0.77500000000000002, 0.69999999999999996]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}], "data": {"data02": [[0.5764049899193547, 0.13690476190476186, 0.06845238095238093], [0.6215662802419354, 0.13690476190476186, 0.06845238095238093]], "data03": [[0.5538243447580645, 0.02380952380952378], [0.9838709677419354, 0.02380952380952378], [0.9838709677419354, 0.17499999999999993], [0.5538243447580645, 0.17499999999999993], [0.5538243447580645, 0.02380952380952378]], "data01": [[735276.0, 1.27100002766, 2.7428749849404164], [735277.0, 2.88199996948, 5.109208345412917], [735278.0, 5.07100009918, 5.234999974569167], [735279.0, 5.26300001144, 4.672875016927083], [735280.0, 4.63700008392, 3.177249987920417], [735281.0, 3.15300011635, 3.2846666475129163], [735282.0, 3.26900005341, 3.6252916455274993], [735283.0, 3.59899997711, 2.1237083574142916], [735284.0, 2.18099999428, 3.2741666634883333], [735285.0, 3.2990000248, 4.786416669687083], [735286.0, 4.74399995804, 3.801458360627167], [735287.0, 3.69799995422, 2.9999166677380416], [735288.0, 3.17000007629, 7.477791587515], [735289.0, 7.52899980545, 7.315541714428334], [735290.0, 7.20499992371, 5.373166700204583], [735291.0, 5.41699981689, 6.90733337402375], [735292.0, 6.96199989319, 7.0063750048474995], [735293.0, 6.99700021744, 5.940416634083333], [735294.0, 5.95800018311, 7.5082084337879165], [735295.0, 7.51300001144, 8.000875075656667], [735296.0, 8.02999973297, 9.117208302025], [735297.0, 9.11999988556, 9.020250002544167], [735298.0, 9.02999973297, 7.066000004609584], [735299.0, 7.01399993896, 7.3596666852637505], [735300.0, 7.22499990463, 6.243666678667917], [735301.0, 6.37799978256, 10.100833296780001], [735302.0, 10.1000003815, 5.446625004212083], [735303.0, 5.32800006866, 4.46000007291625], [735304.0, 4.41400003433, 4.662750019383417], [735305.0, 4.69899988174, 5.789833324652918], [735306.0, 5.85200023651, 7.468416670959583], [735307.0, 7.39799976349, 6.539000007016834], [735308.0, 6.63199996948, 8.9704166650775], [735309.0, 8.89000034332, 3.2998749812441663], [735310.0, 3.28999996185, 4.770291668669708], [735311.0, 4.78000020981, 4.537833342949], [735312.0, 4.6360001564, 3.388666681943583], [735313.0, 3.16899991035, 2.9854583783685835], [735314.0, 3.04600000381, 4.2983333126986665], [735315.0, 4.34399986267, 5.353083342935375], [735316.0, 5.40100002289, 7.513458310621666], [735317.0, 7.59499979019, 6.2666249871279165], [735318.0, 6.23199987411, 4.17020834485625], [735319.0, 4.20900011063, 4.587166706720417], [735320.0, 4.617000103, 5.633999993403333], [735321.0, 5.67199993134, 6.14400003353625], [735322.0, 6.0640001297, 4.118958344062917], [735323.0, 4.08799982071, 4.291749989302512], [735324.0, 4.35300016403, 4.5037083427108335], [735325.0, 4.53100013733, 6.857499976950834], [735326.0, 6.79500007629, 7.018124997614167], [735327.0, 7.11299991608, 6.707374950249583], [735328.0, 6.82700014114, 7.286708354950001], [735329.0, 7.33199977875, 9.984791696074167], [735330.0, 9.93000030518, 10.0635834038225], [735331.0, 10.1199998856, 11.278791765367083], [735332.0, 11.3400001526, 10.505833387372084], [735333.0, 10.3599996567, 8.653000041225667], [735334.0, 8.68999958038, 10.33095820745375], [735335.0, 10.3800001144, 8.740916604799168], [735336.0, 8.65999984741, 9.539083361628082], [735337.0, 9.60999965668, 10.143875025214749], [735338.0, 10.2700004578, 9.0448333422275], [735339.0, 9.06999969482, 9.90458328525625], [735340.0, 9.94999980927, 8.363833248615], [735341.0, 8.32999992371, 8.266583253941667], [735342.0, 8.23999977112, 6.06087501843875], [735343.0, 6.12799978256, 9.883000095685835], [735344.0, 9.93999958038, 9.484541634715416], [735345.0, 9.43000030518, 5.368000020583334], [735346.0, 5.30999994278, 5.96283331513375], [735347.0, 6.03100013733, 7.637458324432084], [735348.0, 7.57899999619, 6.221083313228333], [735349.0, 6.22399997711, 6.6405833661537494], [735350.0, 6.66200017929, 4.737874964873334], [735351.0, 4.6939997673, 8.13491660356125], [735352.0, 8.17000007629, 11.513333261004584], [735353.0, 11.5900001526, 15.063791632649165], [735354.0, 15.1099996567, 16.26208343108833], [735355.0, 16.3199996948, 15.00945826371625], [735356.0, 15.0699996948, 11.994166692095417], [735357.0, 11.9899997711, 9.3157083392125], [735358.0, 9.25, 8.172499974574167], [735359.0, 7.8860001564, 9.059874991575834], [735360.0, 9.02000045776, 9.49029160539375], [735361.0, 9.47999954224, 8.946583271024583], [735362.0, 8.97999954224, 7.0325000286099995], [735363.0, 6.86800003052, 7.148083349067917], [735364.0, 7.21799993515, 10.960999925925416], [735365.0, 10.9799995422, 12.395833392938334], [735366.0, 12.4399995804, 15.616791745021667], [735367.0, 21.3700008392, 18.26366684834375], [735368.0, 18.2999992371, 17.857083400095004], [735369.0, 17.8099994659, 13.627541700995002], [735370.0, 13.5399999619, 14.783749977753333], [735371.0, 14.8400001526, 9.653041720397082], [735372.0, 9.53999996185, 11.21016671260125], [735373.0, 11.2100000381, 12.755041738343749], [735374.0, 12.7899999619, 14.590000033377502], [735375.0, 14.6099996567, 16.6205415527], [735376.0, 16.7700004578, 15.310833334920835], [735377.0, 15.3100004196, 15.51875003179625], [735378.0, 15.4600000381, 15.467583219210418], [735379.0, 15.529999733, 14.68083341915875], [735380.0, 14.4799995422, 11.642583390075833], [735381.0, 11.6199998856, 8.5172083179175], [735382.0, 8.43999958038, 12.26125001907625], [735383.0, 12.279999733, 13.868875126042084], [735384.0, 13.9200000763, 14.4933748841275], [735385.0, 14.4600000381, 14.629958391182917], [735386.0, 14.6599998474, 15.931041578448335], [735387.0, 15.9399995804, 14.103333195054168], [735388.0, 13.9899997711, 14.44395828247167], [735389.0, 14.5, 15.573749999204166], [735390.0, 15.5399999619, 15.25050002336583], [735391.0, 15.25, 15.558249990145832], [735392.0, 15.5500001907, 16.93983330329125], [735393.0, 16.9200000763, 16.24625003338667], [735394.0, 16.1800003052, 14.816083312029166], [735395.0, 14.8100004196, 15.704499999687917], [735396.0, 15.7299995422, 12.565416733419582], [735397.0, 12.5399999619, 10.494166692098332], [735398.0, 10.4799995422, 11.035833438238749], [735399.0, 10.970000267, 11.2731250723225], [735400.0, 11.2600002289, 8.586458384991252], [735401.0, 8.48999977112, 8.943708280722499], [735402.0, 9.01000022888, 13.825000007952083], [735403.0, 13.8299999237, 15.810499787335834], [735404.0, 15.9399995804, 15.274166663481665], [735405.0, 15.1300001144, 13.964791754880416], [735406.0, 14.0399999619, 16.643666605157915], [735407.0, 16.7099990845, 17.95583331585], [735408.0, 17.8700008392, 16.035416722310416], [735409.0, 16.0300006866, 14.359166701628332], [735410.0, 14.4200000763, 15.037083347641664], [735411.0, 15.0100002289, 14.288750012729167], [735412.0, 14.3000001907, 14.759166797], [735413.0, 14.8000001907, 15.286249955491664], [735414.0, 15.25, 17.927458326018336], [735415.0, 18.0499992371, 21.640833218895832], [735416.0, 21.7199993134, 19.5020833412625], [735417.0, 19.4699993134, 16.976250052458333], [735418.0, 16.9500007629, 18.021666646], [735419.0, 18.0200004578, 19.72833327453333], [735420.0, 19.7800006866, 20.16500024], [735421.0, 20.1599998474, 21.809583346045837], [735422.0, 21.8999996185, 22.44958337148333], [735423.0, 22.5200004578, 21.85833342869167], [735424.0, 21.7099990845, 20.573749860133333], [735425.0, 20.5799999237, 18.34374992053333], [735426.0, 18.4099998474, 21.88125002383333], [735427.0, 22.0100002289, 19.921666622158334], [735428.0, 19.9400005341, 21.513333241137502], [735429.0, 21.4699993134, 22.695416808125003], [735430.0, 22.7999992371, 23.323750019079167], [735431.0, 23.2600002289, 20.133333365125], [735432.0, 20.0599994659, 18.372083187108334], [735433.0, 18.4099998474, 20.3849999109875], [735434.0, 20.4500007629, 18.420833468425], [735435.0, 18.3299999237, 16.343333363529165], [735436.0, 16.3999996185, 18.250416636466667], [735437.0, 18.2600002289, 12.572083393729166], [735438.0, 12.4600000381, 13.41749997932875], [735439.0, 13.4099998474, 15.472333272293751], [735440.0, 15.5399999619, 18.112083514541666], [735441.0, 18.1900005341, 18.80875003337083], [735442.0, 18.8600006104, 22.343333284058332], [735443.0, 22.3899993896, 22.179583430295832], [735444.0, 22.1800003052, 22.51541662215833], [735445.0, 22.5400009155, 22.883333404862498], [735446.0, 22.9699993134, 23.517083485912497], [735447.0, 23.4799995422, 21.900833487499998], [735448.0, 21.8500003815, 20.8058332999625], [735449.0, 20.8299999237, 21.269166628529167], [735450.0, 21.2700004578, 19.9624998172125], [735451.0, 19.8299999237, 18.57916673024375], [735452.0, 18.5799999237, 18.861250042916666], [735453.0, 18.8099994659, 17.354583382605416], [735454.0, 17.3400001526, 18.29125003019625], [735455.0, 18.3199996948, 21.604166626920833], [735456.0, 21.6499996185, 21.685833454116665], [735457.0, 21.7299995422, 17.816666801770833], [735458.0, 17.7299995422, 16.71541666984167], [735459.0, 16.7299995422, 17.2966666618875], [735460.0, 17.2399997711, 18.880833268170832], [735461.0, 18.9099998474, 19.62791669367917], [735462.0, 19.6399993896, 20.269166747725], [735463.0, 20.2900009155, 21.51833335557917], [735464.0, 21.5300006866, 21.241666754079166], [735465.0, 21.1800003052, 17.845416545866666], [735466.0, 17.7199993134, 16.125041842449168], [735467.0, 16.1299991608, 16.247916817657917], [735468.0, 16.2099990845, 17.7987500429175], [735469.0, 17.8600006104, 17.398750027018334], [735470.0, 17.3700008392, 18.2841665744775], [735471.0, 18.3899993896, 19.817916552224165], [735472.0, 19.8700008392, 20.8412499427875], [735473.0, 20.8299999237, 19.755833427120834], [735474.0, 19.7299995422, 17.557083209354168], [735475.0, 17.5599994659, 14.822083473208332], [735476.0, 14.8599996567, 15.062083443008333], [735477.0, 14.8999996185, 15.58366664250625], [735478.0, 15.6899995804, 16.159583290412915], [735479.0, 16.1399993896, 13.168500006204583], [735480.0, 13.1300001144, 15.107958376409165], [735481.0, 15.220000267, 17.840333302806666], [735482.0, 17.8700008392, 17.95070838928125], [735483.0, 18.0300006866, 17.580833395311668], [735484.0, 17.6200008392, 16.509583353997915], [735485.0, 16.5499992371, 14.975416660308332], [735486.0, 14.8999996185, 14.959250013025416], [735487.0, 15.029999733, 16.04445830981], [735488.0, 16.0300006866, 16.35045846303542], [735489.0, 16.3600006104, 16.682666838160415], [735490.0, 16.6299991608, 17.238333304722087], [735491.0, 17.2600002289, 17.602916558591666], [735492.0, 17.5699996948, 16.814166665075415], [735493.0, 16.8299999237, 17.61666671435], [735494.0, 17.6800003052, 15.524166623745833], [735495.0, 15.5399999619, 17.963333328566666], [735496.0, 17.8899993896, 19.048750003174998], [735497.0, 19.0499992371, 19.697083512929165], [735498.0, 19.6900005341, 18.2141667604375], [735499.0, 18.1100006104, 16.441249926879166], [735500.0, 16.4799995422, 14.420416673016666], [735501.0, 14.3199996948, 12.530000050870832], [735502.0, 12.5900001526, 12.50166662534375], [735503.0, 12.470000267, 12.050666789213333], [735504.0, 12.0600004196, 14.117499987287916], [735505.0, 14.1999998093, 12.6612500349675], [735506.0, 12.6000003815, 11.410416682562499], [735507.0, 11.3999996185, 10.654541651415], [735508.0, 10.5399999619, 10.510958403348333], [735509.0, 10.5600004196, 12.100750088687917], [735510.0, 12.1099996567, 12.34854161739375], [735511.0, 12.3699998856, 13.343041519324998], [735512.0, 13.3999996185, 14.595416704822084], [735513.0, 14.6400003433, 14.678333401681664], [735514.0, 14.7100000381, 13.566666682570416], [735515.0, 13.5, 11.610375046725002], [735516.0, 11.5900001526, 11.73583318790125], [735517.0, 11.75, 11.949166655548332], [735518.0, 11.8599996567, 11.037416617082082], [735519.0, 10.9899997711, 9.819624920687916], [735520.0, 9.81999969482, 10.2888750831375], [735521.0, 10.3599996567, 9.16624999046625], [735522.0, 9.11999988556, 8.867666761081251], [735523.0, 8.90999984741, 10.669583320625], [735524.0, 10.75, 12.84208337466125], [735525.0, 12.7899999619, 11.178541759647084], [735526.0, 11.2299995422, 10.3195832570325], [735527.0, 10.3500003815, 9.561666647598335], [735528.0, 9.52000045776, 10.167916655535], [735529.0, 10.25, 10.292500098549167], [735530.0, 10.220000267, 9.16854164998], [735531.0, 9.17000007629, 9.502958416937084], [735532.0, 9.43000030518, 6.945541640122916], [735533.0, 6.93800020218, 7.6254999637633345], [735534.0, 7.58699989319, 7.819958408673333], [735535.0, 7.88899993896, 10.846250017490833], [735536.0, 10.8900003433, 11.88791660468], [735537.0, 11.9200000763, 9.064458330475], [735538.0, 8.93000030518, 6.792833328247084], [735539.0, 6.80000019073, 7.4734166264529165], [735540.0, 7.4889998436, 8.41433330377], [735541.0, 8.44999980927, 9.947083314259583], [735542.0, 10.0100002289, 11.810416618989999], [735543.0, 11.7700004578, 9.694999972974584], [735544.0, 9.64000034332, 6.763666679461667], [735545.0, 6.632999897, 6.054166644811667], [735546.0, 6.10400009155, 6.797541757424168], [735547.0, 6.8189997673, 4.894541648526459], [735548.0, 4.73000001907, 1.299166673871775], [735549.0, -1.00199997425, 0.026874998738976252], [735550.0, 0.0390000008047, 0.5862916732825293], [735551.0, 0.65600001812, 4.353541627525833], [735552.0, 4.27799987793, -1.525666677121814], [735553.0, -1.65600001812, -2.752124975124558], [735554.0, -2.7650001049, -1.9067917006712918], [735555.0, -1.875, -0.950291668375125], [735556.0, -0.887000024319, 3.060958330246711], [735557.0, 3.1740000248, 6.136291662851249], [735558.0, 6.17100000381, 6.987208346529584], [735559.0, 7.08799982071, 6.278333326180417], [735560.0, 6.15500020981, 6.170583347480417], [735561.0, 6.20800018311, 6.623083333174166], [735562.0, 6.63500022888, 9.726666629313334], [735563.0, 9.77000045776, 9.130208333333334], [735564.0, 9.11999988556, 8.463541666667084], [735565.0, 8.47999954224, 8.387750029564167], [735566.0, 8.31999969482, 2.4285416795557087], [735567.0, 2.24900007248, -1.1773749999703333], [735568.0, -1.14600002766, 0.8217916535218418], [735569.0, 0.899999976158, 4.4653749863300005], [735570.0, 4.49100017548, 5.069833318392083], [735571.0, 5.09700012207, 6.442166626454584], [735572.0, 6.48400020599, 6.906249980132084], [735573.0, 6.94099998474, 6.875708371400833], [735574.0, 6.72800016403, 4.1439999938015415], [735575.0, 4.23000001907, 6.055041660864583], [735576.0, 6.05700016022, 7.514916678269583], [735577.0, 7.57299995422, 7.964833339055834], [735578.0, 7.95399999619, 7.765416701633334], [735579.0, 7.72800016403, 6.3057500024641655], [735580.0, 6.21299982071, 3.6896666934094164], [735581.0, 3.55999994278, 0.20916666548401666], [735582.0, 0.259999990463, 3.4938750316704166], [735583.0, 3.56900000572, 4.35483332475], [735584.0, 4.34600019455, 4.248083303372083], [735585.0, 4.25400018692, 5.736124992370833], [735586.0, 5.79500007629, 5.6924583514541665], [735587.0, 5.65299987793, 6.07591666778125], [735588.0, 6.23600006104, 9.706249992048749], [735589.0, 9.61999988556, 7.9650000333775], [735590.0, 7.91900014877, 7.839541693528333], [735591.0, 7.90700006485, 4.369083384673334], [735592.0, 4.22499990463, 2.7352083474400004], [735593.0, 2.7349998951, 2.7195833226045836], [735594.0, 2.69499993324, 0.9452916681772501], [735595.0, 0.958000004292, 2.2115416626132083], [735596.0, 2.21399998665, -0.03220832052922499], [735597.0, -0.170000001788, -4.3979583779962494], [735598.0, -4.53800010681, -4.722958336273333], [735599.0, -4.60300016403, -2.579791645207917], [735600.0, -2.52600002289, -1.5765000159555], [735601.0, -1.5379999876, -0.2733333331217083], [735602.0, -0.287000000477, 0.8817916653738916], [735603.0, 0.929000020027, 1.7747916777929167], [735604.0, 1.76499998569, 1.9190833178582853], [735605.0, 1.86800003052, 1.188124994437125], [735606.0, 1.19599997997, 1.8930833417305166], [735607.0, 1.92700004578, 2.8179583276307913], [735608.0, 2.81399989128, 3.5776250337555004], [735609.0, 3.66700005531, 5.260166664917917], [735610.0, 5.26800012589, 5.955333391825417], [735611.0, 5.95900011063, 3.3985833423206127], [735612.0, 3.21900010109, 0.6964583372078126], [735613.0, 0.675999999046, 2.25849999984175], [735614.0, 2.40899991989, 5.9321666459237505], [735615.0, 5.82800006866, 4.8017916282025], [735616.0, 4.99900007248, 7.1999167005225], [735617.0, 7.08900022507, 4.380291678632833], [735618.0, 4.28900003433, 1.25491668842745], [735619.0, 1.22500002384, 1.4272083030081957], [735620.0, 1.50499999523, 4.716833333172917], [735621.0, 4.77699995041, 6.338083386420418], [735622.0, 6.41800022125, 7.353791693845417], [735623.0, 7.35799980164, 6.36133331060125], [735624.0, 6.31799983978, 5.798666646081251], [735625.0, 5.75, 4.84254164000375], [735626.0, 4.95499992371, 6.1913750072300004], [735627.0, 6.13100004196, 5.445166707037917], [735628.0, 5.4439997673, 3.3403333211323836], [735629.0, 3.30900001526, 2.251249979871392], [735630.0, 2.31900000572, 4.48100000619875], [735631.0, 4.55200004578, 7.799625019226249], [735632.0, 7.8189997673, 7.272375007470834], [735633.0, 7.29500007629, 7.83525002002875], [735634.0, 7.83099985123, 7.429541687170833], [735635.0, 7.48600006104, 8.1968750357625], [735636.0, 8.18000030518, 8.32329157988125], [735637.0, 8.34000015259, 7.770958344140833], [735638.0, 7.75299978256, 7.006249964237083], [735639.0, 7.00299978256, 7.1658333738658335], [735640.0, 7.12799978256, 6.250375052293333], [735641.0, 6.2389998436, 5.940875033536666], [735642.0, 5.96099996567, 6.609166622164584], [735643.0, 6.66499996185, 5.81783326466375], [735644.0, 5.74700021744, 4.4537499792232005], [735645.0, 4.42999982834, 4.1431250255559045], [735646.0, 4.13000011444, 4.534083262088775], [735647.0, 4.54699993134, 5.140916693956417], [735648.0, 5.21700000763, 6.984041680894166], [735649.0, 6.88800001144, 5.9001666605487495], [735650.0, 5.92999982834, 4.6655833820525], [735651.0, 4.60799980164, 3.6408332871864997], [735652.0, 3.64199995995, 2.627958334981125], [735653.0, 2.50600004196, 2.114000005026167], [735654.0, 2.13899993896, 3.3087083597962503], [735655.0, 3.44600009918, 5.50741660595]]}, "id": "el860394374996496"});
   }(mpld3);
}else if(typeof define === "function" && define.amd){
   // require.js is available: use it to load d3/mpld3
   require.config({paths: {d3: "https://mpld3.github.io/js/d3.v3.min"}});
   require(["d3"], function(d3){
      window.d3 = d3;
      mpld3_load_lib("https://mpld3.github.io/js/mpld3.v0.2.js", function(){
         
         mpld3.draw_figure("fig_el8603943749964965113286983", {"axes": [{"xlim": [735276.0, 735655.0], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "days", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.16004153347975508], "rotation": -0.0, "id": "el860394380619088"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "air temperature in C", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.054939516129032251, 0.5], "rotation": -90.0, "id": "el860394380713168"}, {"v_baseline": "auto", "h_anchor": "start", "color": "#000000", "text": "daily air", "coordinates": "axes", "zorder": 2000003.0, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.65705015120967736, 0.1202380952380952], "rotation": -0.0, "id": "el860394380450512"}, {"v_baseline": "auto", "h_anchor": "start", "color": "#000000", "text": "hourly avg daily air", "coordinates": "axes", "zorder": 2000003.0, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.65705015120967736, 0.051785714285714268], "rotation": -0.0, "id": "el860394380072016"}], "zoomable": true, "images": [], "xdomain": [[2014, 1, 12, 0, 0, 0, 0.0], [2015, 1, 26, 0, 0, 0, 0.0]], "ylim": [-5.0, 25.0], "paths": [{"edgecolor": "#000000", "facecolor": "#FFFFFF", "edgewidth": 1.0, "pathcodes": ["M", "L", "L", "L", "L", "Z"], "yindex": 1, "coordinates": "axes", "dasharray": "10,0", "zorder": 2000001.0, "alpha": 1, "xindex": 0, "data": "data03", "id": "el860394380450000"}], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"color": "#000000", "alpha": 0.2, "dasharray": "2,2", "gridOn": true}, "fontsize": 12.0, "position": "bottom", "nticks": 6, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"color": "#000000", "alpha": 0.2, "dasharray": "2,2", "gridOn": true}, "fontsize": 12.0, "position": "left", "nticks": 7, "tickvalues": null}], "lines": [{"color": "#FF0000", "yindex": 1, "coordinates": "data", "dasharray": "10,0", "zorder": 2, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data01", "id": "el860394380758992"}, {"color": "#0000FF", "yindex": 2, "coordinates": "data", "dasharray": "10,0", "zorder": 2, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data01", "id": "el860394380447440"}, {"color": "#FF0000", "yindex": 1, "coordinates": "axes", "dasharray": "10,0", "zorder": 2000002.0, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data02", "id": "el860394380070544"}, {"color": "#0000FF", "yindex": 2, "coordinates": "axes", "dasharray": "10,0", "zorder": 2000002.0, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data02", "id": "el860394380072976"}], "markers": [], "id": "el860394377477776", "ydomain": [-5.0, 25.0], "collections": [], "xscale": "date", "bbox": [0.125, 0.20000000000000007, 0.77500000000000002, 0.69999999999999996]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}], "data": {"data02": [[0.5764049899193547, 0.13690476190476186, 0.06845238095238093], [0.6215662802419354, 0.13690476190476186, 0.06845238095238093]], "data03": [[0.5538243447580645, 0.02380952380952378], [0.9838709677419354, 0.02380952380952378], [0.9838709677419354, 0.17499999999999993], [0.5538243447580645, 0.17499999999999993], [0.5538243447580645, 0.02380952380952378]], "data01": [[735276.0, 1.27100002766, 2.7428749849404164], [735277.0, 2.88199996948, 5.109208345412917], [735278.0, 5.07100009918, 5.234999974569167], [735279.0, 5.26300001144, 4.672875016927083], [735280.0, 4.63700008392, 3.177249987920417], [735281.0, 3.15300011635, 3.2846666475129163], [735282.0, 3.26900005341, 3.6252916455274993], [735283.0, 3.59899997711, 2.1237083574142916], [735284.0, 2.18099999428, 3.2741666634883333], [735285.0, 3.2990000248, 4.786416669687083], [735286.0, 4.74399995804, 3.801458360627167], [735287.0, 3.69799995422, 2.9999166677380416], [735288.0, 3.17000007629, 7.477791587515], [735289.0, 7.52899980545, 7.315541714428334], [735290.0, 7.20499992371, 5.373166700204583], [735291.0, 5.41699981689, 6.90733337402375], [735292.0, 6.96199989319, 7.0063750048474995], [735293.0, 6.99700021744, 5.940416634083333], [735294.0, 5.95800018311, 7.5082084337879165], [735295.0, 7.51300001144, 8.000875075656667], [735296.0, 8.02999973297, 9.117208302025], [735297.0, 9.11999988556, 9.020250002544167], [735298.0, 9.02999973297, 7.066000004609584], [735299.0, 7.01399993896, 7.3596666852637505], [735300.0, 7.22499990463, 6.243666678667917], [735301.0, 6.37799978256, 10.100833296780001], [735302.0, 10.1000003815, 5.446625004212083], [735303.0, 5.32800006866, 4.46000007291625], [735304.0, 4.41400003433, 4.662750019383417], [735305.0, 4.69899988174, 5.789833324652918], [735306.0, 5.85200023651, 7.468416670959583], [735307.0, 7.39799976349, 6.539000007016834], [735308.0, 6.63199996948, 8.9704166650775], [735309.0, 8.89000034332, 3.2998749812441663], [735310.0, 3.28999996185, 4.770291668669708], [735311.0, 4.78000020981, 4.537833342949], [735312.0, 4.6360001564, 3.388666681943583], [735313.0, 3.16899991035, 2.9854583783685835], [735314.0, 3.04600000381, 4.2983333126986665], [735315.0, 4.34399986267, 5.353083342935375], [735316.0, 5.40100002289, 7.513458310621666], [735317.0, 7.59499979019, 6.2666249871279165], [735318.0, 6.23199987411, 4.17020834485625], [735319.0, 4.20900011063, 4.587166706720417], [735320.0, 4.617000103, 5.633999993403333], [735321.0, 5.67199993134, 6.14400003353625], [735322.0, 6.0640001297, 4.118958344062917], [735323.0, 4.08799982071, 4.291749989302512], [735324.0, 4.35300016403, 4.5037083427108335], [735325.0, 4.53100013733, 6.857499976950834], [735326.0, 6.79500007629, 7.018124997614167], [735327.0, 7.11299991608, 6.707374950249583], [735328.0, 6.82700014114, 7.286708354950001], [735329.0, 7.33199977875, 9.984791696074167], [735330.0, 9.93000030518, 10.0635834038225], [735331.0, 10.1199998856, 11.278791765367083], [735332.0, 11.3400001526, 10.505833387372084], [735333.0, 10.3599996567, 8.653000041225667], [735334.0, 8.68999958038, 10.33095820745375], [735335.0, 10.3800001144, 8.740916604799168], [735336.0, 8.65999984741, 9.539083361628082], [735337.0, 9.60999965668, 10.143875025214749], [735338.0, 10.2700004578, 9.0448333422275], [735339.0, 9.06999969482, 9.90458328525625], [735340.0, 9.94999980927, 8.363833248615], [735341.0, 8.32999992371, 8.266583253941667], [735342.0, 8.23999977112, 6.06087501843875], [735343.0, 6.12799978256, 9.883000095685835], [735344.0, 9.93999958038, 9.484541634715416], [735345.0, 9.43000030518, 5.368000020583334], [735346.0, 5.30999994278, 5.96283331513375], [735347.0, 6.03100013733, 7.637458324432084], [735348.0, 7.57899999619, 6.221083313228333], [735349.0, 6.22399997711, 6.6405833661537494], [735350.0, 6.66200017929, 4.737874964873334], [735351.0, 4.6939997673, 8.13491660356125], [735352.0, 8.17000007629, 11.513333261004584], [735353.0, 11.5900001526, 15.063791632649165], [735354.0, 15.1099996567, 16.26208343108833], [735355.0, 16.3199996948, 15.00945826371625], [735356.0, 15.0699996948, 11.994166692095417], [735357.0, 11.9899997711, 9.3157083392125], [735358.0, 9.25, 8.172499974574167], [735359.0, 7.8860001564, 9.059874991575834], [735360.0, 9.02000045776, 9.49029160539375], [735361.0, 9.47999954224, 8.946583271024583], [735362.0, 8.97999954224, 7.0325000286099995], [735363.0, 6.86800003052, 7.148083349067917], [735364.0, 7.21799993515, 10.960999925925416], [735365.0, 10.9799995422, 12.395833392938334], [735366.0, 12.4399995804, 15.616791745021667], [735367.0, 21.3700008392, 18.26366684834375], [735368.0, 18.2999992371, 17.857083400095004], [735369.0, 17.8099994659, 13.627541700995002], [735370.0, 13.5399999619, 14.783749977753333], [735371.0, 14.8400001526, 9.653041720397082], [735372.0, 9.53999996185, 11.21016671260125], [735373.0, 11.2100000381, 12.755041738343749], [735374.0, 12.7899999619, 14.590000033377502], [735375.0, 14.6099996567, 16.6205415527], [735376.0, 16.7700004578, 15.310833334920835], [735377.0, 15.3100004196, 15.51875003179625], [735378.0, 15.4600000381, 15.467583219210418], [735379.0, 15.529999733, 14.68083341915875], [735380.0, 14.4799995422, 11.642583390075833], [735381.0, 11.6199998856, 8.5172083179175], [735382.0, 8.43999958038, 12.26125001907625], [735383.0, 12.279999733, 13.868875126042084], [735384.0, 13.9200000763, 14.4933748841275], [735385.0, 14.4600000381, 14.629958391182917], [735386.0, 14.6599998474, 15.931041578448335], [735387.0, 15.9399995804, 14.103333195054168], [735388.0, 13.9899997711, 14.44395828247167], [735389.0, 14.5, 15.573749999204166], [735390.0, 15.5399999619, 15.25050002336583], [735391.0, 15.25, 15.558249990145832], [735392.0, 15.5500001907, 16.93983330329125], [735393.0, 16.9200000763, 16.24625003338667], [735394.0, 16.1800003052, 14.816083312029166], [735395.0, 14.8100004196, 15.704499999687917], [735396.0, 15.7299995422, 12.565416733419582], [735397.0, 12.5399999619, 10.494166692098332], [735398.0, 10.4799995422, 11.035833438238749], [735399.0, 10.970000267, 11.2731250723225], [735400.0, 11.2600002289, 8.586458384991252], [735401.0, 8.48999977112, 8.943708280722499], [735402.0, 9.01000022888, 13.825000007952083], [735403.0, 13.8299999237, 15.810499787335834], [735404.0, 15.9399995804, 15.274166663481665], [735405.0, 15.1300001144, 13.964791754880416], [735406.0, 14.0399999619, 16.643666605157915], [735407.0, 16.7099990845, 17.95583331585], [735408.0, 17.8700008392, 16.035416722310416], [735409.0, 16.0300006866, 14.359166701628332], [735410.0, 14.4200000763, 15.037083347641664], [735411.0, 15.0100002289, 14.288750012729167], [735412.0, 14.3000001907, 14.759166797], [735413.0, 14.8000001907, 15.286249955491664], [735414.0, 15.25, 17.927458326018336], [735415.0, 18.0499992371, 21.640833218895832], [735416.0, 21.7199993134, 19.5020833412625], [735417.0, 19.4699993134, 16.976250052458333], [735418.0, 16.9500007629, 18.021666646], [735419.0, 18.0200004578, 19.72833327453333], [735420.0, 19.7800006866, 20.16500024], [735421.0, 20.1599998474, 21.809583346045837], [735422.0, 21.8999996185, 22.44958337148333], [735423.0, 22.5200004578, 21.85833342869167], [735424.0, 21.7099990845, 20.573749860133333], [735425.0, 20.5799999237, 18.34374992053333], [735426.0, 18.4099998474, 21.88125002383333], [735427.0, 22.0100002289, 19.921666622158334], [735428.0, 19.9400005341, 21.513333241137502], [735429.0, 21.4699993134, 22.695416808125003], [735430.0, 22.7999992371, 23.323750019079167], [735431.0, 23.2600002289, 20.133333365125], [735432.0, 20.0599994659, 18.372083187108334], [735433.0, 18.4099998474, 20.3849999109875], [735434.0, 20.4500007629, 18.420833468425], [735435.0, 18.3299999237, 16.343333363529165], [735436.0, 16.3999996185, 18.250416636466667], [735437.0, 18.2600002289, 12.572083393729166], [735438.0, 12.4600000381, 13.41749997932875], [735439.0, 13.4099998474, 15.472333272293751], [735440.0, 15.5399999619, 18.112083514541666], [735441.0, 18.1900005341, 18.80875003337083], [735442.0, 18.8600006104, 22.343333284058332], [735443.0, 22.3899993896, 22.179583430295832], [735444.0, 22.1800003052, 22.51541662215833], [735445.0, 22.5400009155, 22.883333404862498], [735446.0, 22.9699993134, 23.517083485912497], [735447.0, 23.4799995422, 21.900833487499998], [735448.0, 21.8500003815, 20.8058332999625], [735449.0, 20.8299999237, 21.269166628529167], [735450.0, 21.2700004578, 19.9624998172125], [735451.0, 19.8299999237, 18.57916673024375], [735452.0, 18.5799999237, 18.861250042916666], [735453.0, 18.8099994659, 17.354583382605416], [735454.0, 17.3400001526, 18.29125003019625], [735455.0, 18.3199996948, 21.604166626920833], [735456.0, 21.6499996185, 21.685833454116665], [735457.0, 21.7299995422, 17.816666801770833], [735458.0, 17.7299995422, 16.71541666984167], [735459.0, 16.7299995422, 17.2966666618875], [735460.0, 17.2399997711, 18.880833268170832], [735461.0, 18.9099998474, 19.62791669367917], [735462.0, 19.6399993896, 20.269166747725], [735463.0, 20.2900009155, 21.51833335557917], [735464.0, 21.5300006866, 21.241666754079166], [735465.0, 21.1800003052, 17.845416545866666], [735466.0, 17.7199993134, 16.125041842449168], [735467.0, 16.1299991608, 16.247916817657917], [735468.0, 16.2099990845, 17.7987500429175], [735469.0, 17.8600006104, 17.398750027018334], [735470.0, 17.3700008392, 18.2841665744775], [735471.0, 18.3899993896, 19.817916552224165], [735472.0, 19.8700008392, 20.8412499427875], [735473.0, 20.8299999237, 19.755833427120834], [735474.0, 19.7299995422, 17.557083209354168], [735475.0, 17.5599994659, 14.822083473208332], [735476.0, 14.8599996567, 15.062083443008333], [735477.0, 14.8999996185, 15.58366664250625], [735478.0, 15.6899995804, 16.159583290412915], [735479.0, 16.1399993896, 13.168500006204583], [735480.0, 13.1300001144, 15.107958376409165], [735481.0, 15.220000267, 17.840333302806666], [735482.0, 17.8700008392, 17.95070838928125], [735483.0, 18.0300006866, 17.580833395311668], [735484.0, 17.6200008392, 16.509583353997915], [735485.0, 16.5499992371, 14.975416660308332], [735486.0, 14.8999996185, 14.959250013025416], [735487.0, 15.029999733, 16.04445830981], [735488.0, 16.0300006866, 16.35045846303542], [735489.0, 16.3600006104, 16.682666838160415], [735490.0, 16.6299991608, 17.238333304722087], [735491.0, 17.2600002289, 17.602916558591666], [735492.0, 17.5699996948, 16.814166665075415], [735493.0, 16.8299999237, 17.61666671435], [735494.0, 17.6800003052, 15.524166623745833], [735495.0, 15.5399999619, 17.963333328566666], [735496.0, 17.8899993896, 19.048750003174998], [735497.0, 19.0499992371, 19.697083512929165], [735498.0, 19.6900005341, 18.2141667604375], [735499.0, 18.1100006104, 16.441249926879166], [735500.0, 16.4799995422, 14.420416673016666], [735501.0, 14.3199996948, 12.530000050870832], [735502.0, 12.5900001526, 12.50166662534375], [735503.0, 12.470000267, 12.050666789213333], [735504.0, 12.0600004196, 14.117499987287916], [735505.0, 14.1999998093, 12.6612500349675], [735506.0, 12.6000003815, 11.410416682562499], [735507.0, 11.3999996185, 10.654541651415], [735508.0, 10.5399999619, 10.510958403348333], [735509.0, 10.5600004196, 12.100750088687917], [735510.0, 12.1099996567, 12.34854161739375], [735511.0, 12.3699998856, 13.343041519324998], [735512.0, 13.3999996185, 14.595416704822084], [735513.0, 14.6400003433, 14.678333401681664], [735514.0, 14.7100000381, 13.566666682570416], [735515.0, 13.5, 11.610375046725002], [735516.0, 11.5900001526, 11.73583318790125], [735517.0, 11.75, 11.949166655548332], [735518.0, 11.8599996567, 11.037416617082082], [735519.0, 10.9899997711, 9.819624920687916], [735520.0, 9.81999969482, 10.2888750831375], [735521.0, 10.3599996567, 9.16624999046625], [735522.0, 9.11999988556, 8.867666761081251], [735523.0, 8.90999984741, 10.669583320625], [735524.0, 10.75, 12.84208337466125], [735525.0, 12.7899999619, 11.178541759647084], [735526.0, 11.2299995422, 10.3195832570325], [735527.0, 10.3500003815, 9.561666647598335], [735528.0, 9.52000045776, 10.167916655535], [735529.0, 10.25, 10.292500098549167], [735530.0, 10.220000267, 9.16854164998], [735531.0, 9.17000007629, 9.502958416937084], [735532.0, 9.43000030518, 6.945541640122916], [735533.0, 6.93800020218, 7.6254999637633345], [735534.0, 7.58699989319, 7.819958408673333], [735535.0, 7.88899993896, 10.846250017490833], [735536.0, 10.8900003433, 11.88791660468], [735537.0, 11.9200000763, 9.064458330475], [735538.0, 8.93000030518, 6.792833328247084], [735539.0, 6.80000019073, 7.4734166264529165], [735540.0, 7.4889998436, 8.41433330377], [735541.0, 8.44999980927, 9.947083314259583], [735542.0, 10.0100002289, 11.810416618989999], [735543.0, 11.7700004578, 9.694999972974584], [735544.0, 9.64000034332, 6.763666679461667], [735545.0, 6.632999897, 6.054166644811667], [735546.0, 6.10400009155, 6.797541757424168], [735547.0, 6.8189997673, 4.894541648526459], [735548.0, 4.73000001907, 1.299166673871775], [735549.0, -1.00199997425, 0.026874998738976252], [735550.0, 0.0390000008047, 0.5862916732825293], [735551.0, 0.65600001812, 4.353541627525833], [735552.0, 4.27799987793, -1.525666677121814], [735553.0, -1.65600001812, -2.752124975124558], [735554.0, -2.7650001049, -1.9067917006712918], [735555.0, -1.875, -0.950291668375125], [735556.0, -0.887000024319, 3.060958330246711], [735557.0, 3.1740000248, 6.136291662851249], [735558.0, 6.17100000381, 6.987208346529584], [735559.0, 7.08799982071, 6.278333326180417], [735560.0, 6.15500020981, 6.170583347480417], [735561.0, 6.20800018311, 6.623083333174166], [735562.0, 6.63500022888, 9.726666629313334], [735563.0, 9.77000045776, 9.130208333333334], [735564.0, 9.11999988556, 8.463541666667084], [735565.0, 8.47999954224, 8.387750029564167], [735566.0, 8.31999969482, 2.4285416795557087], [735567.0, 2.24900007248, -1.1773749999703333], [735568.0, -1.14600002766, 0.8217916535218418], [735569.0, 0.899999976158, 4.4653749863300005], [735570.0, 4.49100017548, 5.069833318392083], [735571.0, 5.09700012207, 6.442166626454584], [735572.0, 6.48400020599, 6.906249980132084], [735573.0, 6.94099998474, 6.875708371400833], [735574.0, 6.72800016403, 4.1439999938015415], [735575.0, 4.23000001907, 6.055041660864583], [735576.0, 6.05700016022, 7.514916678269583], [735577.0, 7.57299995422, 7.964833339055834], [735578.0, 7.95399999619, 7.765416701633334], [735579.0, 7.72800016403, 6.3057500024641655], [735580.0, 6.21299982071, 3.6896666934094164], [735581.0, 3.55999994278, 0.20916666548401666], [735582.0, 0.259999990463, 3.4938750316704166], [735583.0, 3.56900000572, 4.35483332475], [735584.0, 4.34600019455, 4.248083303372083], [735585.0, 4.25400018692, 5.736124992370833], [735586.0, 5.79500007629, 5.6924583514541665], [735587.0, 5.65299987793, 6.07591666778125], [735588.0, 6.23600006104, 9.706249992048749], [735589.0, 9.61999988556, 7.9650000333775], [735590.0, 7.91900014877, 7.839541693528333], [735591.0, 7.90700006485, 4.369083384673334], [735592.0, 4.22499990463, 2.7352083474400004], [735593.0, 2.7349998951, 2.7195833226045836], [735594.0, 2.69499993324, 0.9452916681772501], [735595.0, 0.958000004292, 2.2115416626132083], [735596.0, 2.21399998665, -0.03220832052922499], [735597.0, -0.170000001788, -4.3979583779962494], [735598.0, -4.53800010681, -4.722958336273333], [735599.0, -4.60300016403, -2.579791645207917], [735600.0, -2.52600002289, -1.5765000159555], [735601.0, -1.5379999876, -0.2733333331217083], [735602.0, -0.287000000477, 0.8817916653738916], [735603.0, 0.929000020027, 1.7747916777929167], [735604.0, 1.76499998569, 1.9190833178582853], [735605.0, 1.86800003052, 1.188124994437125], [735606.0, 1.19599997997, 1.8930833417305166], [735607.0, 1.92700004578, 2.8179583276307913], [735608.0, 2.81399989128, 3.5776250337555004], [735609.0, 3.66700005531, 5.260166664917917], [735610.0, 5.26800012589, 5.955333391825417], [735611.0, 5.95900011063, 3.3985833423206127], [735612.0, 3.21900010109, 0.6964583372078126], [735613.0, 0.675999999046, 2.25849999984175], [735614.0, 2.40899991989, 5.9321666459237505], [735615.0, 5.82800006866, 4.8017916282025], [735616.0, 4.99900007248, 7.1999167005225], [735617.0, 7.08900022507, 4.380291678632833], [735618.0, 4.28900003433, 1.25491668842745], [735619.0, 1.22500002384, 1.4272083030081957], [735620.0, 1.50499999523, 4.716833333172917], [735621.0, 4.77699995041, 6.338083386420418], [735622.0, 6.41800022125, 7.353791693845417], [735623.0, 7.35799980164, 6.36133331060125], [735624.0, 6.31799983978, 5.798666646081251], [735625.0, 5.75, 4.84254164000375], [735626.0, 4.95499992371, 6.1913750072300004], [735627.0, 6.13100004196, 5.445166707037917], [735628.0, 5.4439997673, 3.3403333211323836], [735629.0, 3.30900001526, 2.251249979871392], [735630.0, 2.31900000572, 4.48100000619875], [735631.0, 4.55200004578, 7.799625019226249], [735632.0, 7.8189997673, 7.272375007470834], [735633.0, 7.29500007629, 7.83525002002875], [735634.0, 7.83099985123, 7.429541687170833], [735635.0, 7.48600006104, 8.1968750357625], [735636.0, 8.18000030518, 8.32329157988125], [735637.0, 8.34000015259, 7.770958344140833], [735638.0, 7.75299978256, 7.006249964237083], [735639.0, 7.00299978256, 7.1658333738658335], [735640.0, 7.12799978256, 6.250375052293333], [735641.0, 6.2389998436, 5.940875033536666], [735642.0, 5.96099996567, 6.609166622164584], [735643.0, 6.66499996185, 5.81783326466375], [735644.0, 5.74700021744, 4.4537499792232005], [735645.0, 4.42999982834, 4.1431250255559045], [735646.0, 4.13000011444, 4.534083262088775], [735647.0, 4.54699993134, 5.140916693956417], [735648.0, 5.21700000763, 6.984041680894166], [735649.0, 6.88800001144, 5.9001666605487495], [735650.0, 5.92999982834, 4.6655833820525], [735651.0, 4.60799980164, 3.6408332871864997], [735652.0, 3.64199995995, 2.627958334981125], [735653.0, 2.50600004196, 2.114000005026167], [735654.0, 2.13899993896, 3.3087083597962503], [735655.0, 3.44600009918, 5.50741660595]]}, "id": "el860394374996496"});
      });
    });
}else{
    // require.js not available: dynamically load d3 & mpld3
    mpld3_load_lib("https://mpld3.github.io/js/d3.v3.min.js", function(){
         mpld3_load_lib("https://mpld3.github.io/js/mpld3.v0.2.js", function(){
                 
                 mpld3.draw_figure("fig_el8603943749964965113286983", {"axes": [{"xlim": [735276.0, 735655.0], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "days", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.16004153347975508], "rotation": -0.0, "id": "el860394380619088"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "air temperature in C", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.054939516129032251, 0.5], "rotation": -90.0, "id": "el860394380713168"}, {"v_baseline": "auto", "h_anchor": "start", "color": "#000000", "text": "daily air", "coordinates": "axes", "zorder": 2000003.0, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.65705015120967736, 0.1202380952380952], "rotation": -0.0, "id": "el860394380450512"}, {"v_baseline": "auto", "h_anchor": "start", "color": "#000000", "text": "hourly avg daily air", "coordinates": "axes", "zorder": 2000003.0, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.65705015120967736, 0.051785714285714268], "rotation": -0.0, "id": "el860394380072016"}], "zoomable": true, "images": [], "xdomain": [[2014, 1, 12, 0, 0, 0, 0.0], [2015, 1, 26, 0, 0, 0, 0.0]], "ylim": [-5.0, 25.0], "paths": [{"edgecolor": "#000000", "facecolor": "#FFFFFF", "edgewidth": 1.0, "pathcodes": ["M", "L", "L", "L", "L", "Z"], "yindex": 1, "coordinates": "axes", "dasharray": "10,0", "zorder": 2000001.0, "alpha": 1, "xindex": 0, "data": "data03", "id": "el860394380450000"}], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"color": "#000000", "alpha": 0.2, "dasharray": "2,2", "gridOn": true}, "fontsize": 12.0, "position": "bottom", "nticks": 6, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"color": "#000000", "alpha": 0.2, "dasharray": "2,2", "gridOn": true}, "fontsize": 12.0, "position": "left", "nticks": 7, "tickvalues": null}], "lines": [{"color": "#FF0000", "yindex": 1, "coordinates": "data", "dasharray": "10,0", "zorder": 2, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data01", "id": "el860394380758992"}, {"color": "#0000FF", "yindex": 2, "coordinates": "data", "dasharray": "10,0", "zorder": 2, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data01", "id": "el860394380447440"}, {"color": "#FF0000", "yindex": 1, "coordinates": "axes", "dasharray": "10,0", "zorder": 2000002.0, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data02", "id": "el860394380070544"}, {"color": "#0000FF", "yindex": 2, "coordinates": "axes", "dasharray": "10,0", "zorder": 2000002.0, "alpha": 1, "xindex": 0, "linewidth": 1.0, "data": "data02", "id": "el860394380072976"}], "markers": [], "id": "el860394377477776", "ydomain": [-5.0, 25.0], "collections": [], "xscale": "date", "bbox": [0.125, 0.20000000000000007, 0.77500000000000002, 0.69999999999999996]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}], "data": {"data02": [[0.5764049899193547, 0.13690476190476186, 0.06845238095238093], [0.6215662802419354, 0.13690476190476186, 0.06845238095238093]], "data03": [[0.5538243447580645, 0.02380952380952378], [0.9838709677419354, 0.02380952380952378], [0.9838709677419354, 0.17499999999999993], [0.5538243447580645, 0.17499999999999993], [0.5538243447580645, 0.02380952380952378]], "data01": [[735276.0, 1.27100002766, 2.7428749849404164], [735277.0, 2.88199996948, 5.109208345412917], [735278.0, 5.07100009918, 5.234999974569167], [735279.0, 5.26300001144, 4.672875016927083], [735280.0, 4.63700008392, 3.177249987920417], [735281.0, 3.15300011635, 3.2846666475129163], [735282.0, 3.26900005341, 3.6252916455274993], [735283.0, 3.59899997711, 2.1237083574142916], [735284.0, 2.18099999428, 3.2741666634883333], [735285.0, 3.2990000248, 4.786416669687083], [735286.0, 4.74399995804, 3.801458360627167], [735287.0, 3.69799995422, 2.9999166677380416], [735288.0, 3.17000007629, 7.477791587515], [735289.0, 7.52899980545, 7.315541714428334], [735290.0, 7.20499992371, 5.373166700204583], [735291.0, 5.41699981689, 6.90733337402375], [735292.0, 6.96199989319, 7.0063750048474995], [735293.0, 6.99700021744, 5.940416634083333], [735294.0, 5.95800018311, 7.5082084337879165], [735295.0, 7.51300001144, 8.000875075656667], [735296.0, 8.02999973297, 9.117208302025], [735297.0, 9.11999988556, 9.020250002544167], [735298.0, 9.02999973297, 7.066000004609584], [735299.0, 7.01399993896, 7.3596666852637505], [735300.0, 7.22499990463, 6.243666678667917], [735301.0, 6.37799978256, 10.100833296780001], [735302.0, 10.1000003815, 5.446625004212083], [735303.0, 5.32800006866, 4.46000007291625], [735304.0, 4.41400003433, 4.662750019383417], [735305.0, 4.69899988174, 5.789833324652918], [735306.0, 5.85200023651, 7.468416670959583], [735307.0, 7.39799976349, 6.539000007016834], [735308.0, 6.63199996948, 8.9704166650775], [735309.0, 8.89000034332, 3.2998749812441663], [735310.0, 3.28999996185, 4.770291668669708], [735311.0, 4.78000020981, 4.537833342949], [735312.0, 4.6360001564, 3.388666681943583], [735313.0, 3.16899991035, 2.9854583783685835], [735314.0, 3.04600000381, 4.2983333126986665], [735315.0, 4.34399986267, 5.353083342935375], [735316.0, 5.40100002289, 7.513458310621666], [735317.0, 7.59499979019, 6.2666249871279165], [735318.0, 6.23199987411, 4.17020834485625], [735319.0, 4.20900011063, 4.587166706720417], [735320.0, 4.617000103, 5.633999993403333], [735321.0, 5.67199993134, 6.14400003353625], [735322.0, 6.0640001297, 4.118958344062917], [735323.0, 4.08799982071, 4.291749989302512], [735324.0, 4.35300016403, 4.5037083427108335], [735325.0, 4.53100013733, 6.857499976950834], [735326.0, 6.79500007629, 7.018124997614167], [735327.0, 7.11299991608, 6.707374950249583], [735328.0, 6.82700014114, 7.286708354950001], [735329.0, 7.33199977875, 9.984791696074167], [735330.0, 9.93000030518, 10.0635834038225], [735331.0, 10.1199998856, 11.278791765367083], [735332.0, 11.3400001526, 10.505833387372084], [735333.0, 10.3599996567, 8.653000041225667], [735334.0, 8.68999958038, 10.33095820745375], [735335.0, 10.3800001144, 8.740916604799168], [735336.0, 8.65999984741, 9.539083361628082], [735337.0, 9.60999965668, 10.143875025214749], [735338.0, 10.2700004578, 9.0448333422275], [735339.0, 9.06999969482, 9.90458328525625], [735340.0, 9.94999980927, 8.363833248615], [735341.0, 8.32999992371, 8.266583253941667], [735342.0, 8.23999977112, 6.06087501843875], [735343.0, 6.12799978256, 9.883000095685835], [735344.0, 9.93999958038, 9.484541634715416], [735345.0, 9.43000030518, 5.368000020583334], [735346.0, 5.30999994278, 5.96283331513375], [735347.0, 6.03100013733, 7.637458324432084], [735348.0, 7.57899999619, 6.221083313228333], [735349.0, 6.22399997711, 6.6405833661537494], [735350.0, 6.66200017929, 4.737874964873334], [735351.0, 4.6939997673, 8.13491660356125], [735352.0, 8.17000007629, 11.513333261004584], [735353.0, 11.5900001526, 15.063791632649165], [735354.0, 15.1099996567, 16.26208343108833], [735355.0, 16.3199996948, 15.00945826371625], [735356.0, 15.0699996948, 11.994166692095417], [735357.0, 11.9899997711, 9.3157083392125], [735358.0, 9.25, 8.172499974574167], [735359.0, 7.8860001564, 9.059874991575834], [735360.0, 9.02000045776, 9.49029160539375], [735361.0, 9.47999954224, 8.946583271024583], [735362.0, 8.97999954224, 7.0325000286099995], [735363.0, 6.86800003052, 7.148083349067917], [735364.0, 7.21799993515, 10.960999925925416], [735365.0, 10.9799995422, 12.395833392938334], [735366.0, 12.4399995804, 15.616791745021667], [735367.0, 21.3700008392, 18.26366684834375], [735368.0, 18.2999992371, 17.857083400095004], [735369.0, 17.8099994659, 13.627541700995002], [735370.0, 13.5399999619, 14.783749977753333], [735371.0, 14.8400001526, 9.653041720397082], [735372.0, 9.53999996185, 11.21016671260125], [735373.0, 11.2100000381, 12.755041738343749], [735374.0, 12.7899999619, 14.590000033377502], [735375.0, 14.6099996567, 16.6205415527], [735376.0, 16.7700004578, 15.310833334920835], [735377.0, 15.3100004196, 15.51875003179625], [735378.0, 15.4600000381, 15.467583219210418], [735379.0, 15.529999733, 14.68083341915875], [735380.0, 14.4799995422, 11.642583390075833], [735381.0, 11.6199998856, 8.5172083179175], [735382.0, 8.43999958038, 12.26125001907625], [735383.0, 12.279999733, 13.868875126042084], [735384.0, 13.9200000763, 14.4933748841275], [735385.0, 14.4600000381, 14.629958391182917], [735386.0, 14.6599998474, 15.931041578448335], [735387.0, 15.9399995804, 14.103333195054168], [735388.0, 13.9899997711, 14.44395828247167], [735389.0, 14.5, 15.573749999204166], [735390.0, 15.5399999619, 15.25050002336583], [735391.0, 15.25, 15.558249990145832], [735392.0, 15.5500001907, 16.93983330329125], [735393.0, 16.9200000763, 16.24625003338667], [735394.0, 16.1800003052, 14.816083312029166], [735395.0, 14.8100004196, 15.704499999687917], [735396.0, 15.7299995422, 12.565416733419582], [735397.0, 12.5399999619, 10.494166692098332], [735398.0, 10.4799995422, 11.035833438238749], [735399.0, 10.970000267, 11.2731250723225], [735400.0, 11.2600002289, 8.586458384991252], [735401.0, 8.48999977112, 8.943708280722499], [735402.0, 9.01000022888, 13.825000007952083], [735403.0, 13.8299999237, 15.810499787335834], [735404.0, 15.9399995804, 15.274166663481665], [735405.0, 15.1300001144, 13.964791754880416], [735406.0, 14.0399999619, 16.643666605157915], [735407.0, 16.7099990845, 17.95583331585], [735408.0, 17.8700008392, 16.035416722310416], [735409.0, 16.0300006866, 14.359166701628332], [735410.0, 14.4200000763, 15.037083347641664], [735411.0, 15.0100002289, 14.288750012729167], [735412.0, 14.3000001907, 14.759166797], [735413.0, 14.8000001907, 15.286249955491664], [735414.0, 15.25, 17.927458326018336], [735415.0, 18.0499992371, 21.640833218895832], [735416.0, 21.7199993134, 19.5020833412625], [735417.0, 19.4699993134, 16.976250052458333], [735418.0, 16.9500007629, 18.021666646], [735419.0, 18.0200004578, 19.72833327453333], [735420.0, 19.7800006866, 20.16500024], [735421.0, 20.1599998474, 21.809583346045837], [735422.0, 21.8999996185, 22.44958337148333], [735423.0, 22.5200004578, 21.85833342869167], [735424.0, 21.7099990845, 20.573749860133333], [735425.0, 20.5799999237, 18.34374992053333], [735426.0, 18.4099998474, 21.88125002383333], [735427.0, 22.0100002289, 19.921666622158334], [735428.0, 19.9400005341, 21.513333241137502], [735429.0, 21.4699993134, 22.695416808125003], [735430.0, 22.7999992371, 23.323750019079167], [735431.0, 23.2600002289, 20.133333365125], [735432.0, 20.0599994659, 18.372083187108334], [735433.0, 18.4099998474, 20.3849999109875], [735434.0, 20.4500007629, 18.420833468425], [735435.0, 18.3299999237, 16.343333363529165], [735436.0, 16.3999996185, 18.250416636466667], [735437.0, 18.2600002289, 12.572083393729166], [735438.0, 12.4600000381, 13.41749997932875], [735439.0, 13.4099998474, 15.472333272293751], [735440.0, 15.5399999619, 18.112083514541666], [735441.0, 18.1900005341, 18.80875003337083], [735442.0, 18.8600006104, 22.343333284058332], [735443.0, 22.3899993896, 22.179583430295832], [735444.0, 22.1800003052, 22.51541662215833], [735445.0, 22.5400009155, 22.883333404862498], [735446.0, 22.9699993134, 23.517083485912497], [735447.0, 23.4799995422, 21.900833487499998], [735448.0, 21.8500003815, 20.8058332999625], [735449.0, 20.8299999237, 21.269166628529167], [735450.0, 21.2700004578, 19.9624998172125], [735451.0, 19.8299999237, 18.57916673024375], [735452.0, 18.5799999237, 18.861250042916666], [735453.0, 18.8099994659, 17.354583382605416], [735454.0, 17.3400001526, 18.29125003019625], [735455.0, 18.3199996948, 21.604166626920833], [735456.0, 21.6499996185, 21.685833454116665], [735457.0, 21.7299995422, 17.816666801770833], [735458.0, 17.7299995422, 16.71541666984167], [735459.0, 16.7299995422, 17.2966666618875], [735460.0, 17.2399997711, 18.880833268170832], [735461.0, 18.9099998474, 19.62791669367917], [735462.0, 19.6399993896, 20.269166747725], [735463.0, 20.2900009155, 21.51833335557917], [735464.0, 21.5300006866, 21.241666754079166], [735465.0, 21.1800003052, 17.845416545866666], [735466.0, 17.7199993134, 16.125041842449168], [735467.0, 16.1299991608, 16.247916817657917], [735468.0, 16.2099990845, 17.7987500429175], [735469.0, 17.8600006104, 17.398750027018334], [735470.0, 17.3700008392, 18.2841665744775], [735471.0, 18.3899993896, 19.817916552224165], [735472.0, 19.8700008392, 20.8412499427875], [735473.0, 20.8299999237, 19.755833427120834], [735474.0, 19.7299995422, 17.557083209354168], [735475.0, 17.5599994659, 14.822083473208332], [735476.0, 14.8599996567, 15.062083443008333], [735477.0, 14.8999996185, 15.58366664250625], [735478.0, 15.6899995804, 16.159583290412915], [735479.0, 16.1399993896, 13.168500006204583], [735480.0, 13.1300001144, 15.107958376409165], [735481.0, 15.220000267, 17.840333302806666], [735482.0, 17.8700008392, 17.95070838928125], [735483.0, 18.0300006866, 17.580833395311668], [735484.0, 17.6200008392, 16.509583353997915], [735485.0, 16.5499992371, 14.975416660308332], [735486.0, 14.8999996185, 14.959250013025416], [735487.0, 15.029999733, 16.04445830981], [735488.0, 16.0300006866, 16.35045846303542], [735489.0, 16.3600006104, 16.682666838160415], [735490.0, 16.6299991608, 17.238333304722087], [735491.0, 17.2600002289, 17.602916558591666], [735492.0, 17.5699996948, 16.814166665075415], [735493.0, 16.8299999237, 17.61666671435], [735494.0, 17.6800003052, 15.524166623745833], [735495.0, 15.5399999619, 17.963333328566666], [735496.0, 17.8899993896, 19.048750003174998], [735497.0, 19.0499992371, 19.697083512929165], [735498.0, 19.6900005341, 18.2141667604375], [735499.0, 18.1100006104, 16.441249926879166], [735500.0, 16.4799995422, 14.420416673016666], [735501.0, 14.3199996948, 12.530000050870832], [735502.0, 12.5900001526, 12.50166662534375], [735503.0, 12.470000267, 12.050666789213333], [735504.0, 12.0600004196, 14.117499987287916], [735505.0, 14.1999998093, 12.6612500349675], [735506.0, 12.6000003815, 11.410416682562499], [735507.0, 11.3999996185, 10.654541651415], [735508.0, 10.5399999619, 10.510958403348333], [735509.0, 10.5600004196, 12.100750088687917], [735510.0, 12.1099996567, 12.34854161739375], [735511.0, 12.3699998856, 13.343041519324998], [735512.0, 13.3999996185, 14.595416704822084], [735513.0, 14.6400003433, 14.678333401681664], [735514.0, 14.7100000381, 13.566666682570416], [735515.0, 13.5, 11.610375046725002], [735516.0, 11.5900001526, 11.73583318790125], [735517.0, 11.75, 11.949166655548332], [735518.0, 11.8599996567, 11.037416617082082], [735519.0, 10.9899997711, 9.819624920687916], [735520.0, 9.81999969482, 10.2888750831375], [735521.0, 10.3599996567, 9.16624999046625], [735522.0, 9.11999988556, 8.867666761081251], [735523.0, 8.90999984741, 10.669583320625], [735524.0, 10.75, 12.84208337466125], [735525.0, 12.7899999619, 11.178541759647084], [735526.0, 11.2299995422, 10.3195832570325], [735527.0, 10.3500003815, 9.561666647598335], [735528.0, 9.52000045776, 10.167916655535], [735529.0, 10.25, 10.292500098549167], [735530.0, 10.220000267, 9.16854164998], [735531.0, 9.17000007629, 9.502958416937084], [735532.0, 9.43000030518, 6.945541640122916], [735533.0, 6.93800020218, 7.6254999637633345], [735534.0, 7.58699989319, 7.819958408673333], [735535.0, 7.88899993896, 10.846250017490833], [735536.0, 10.8900003433, 11.88791660468], [735537.0, 11.9200000763, 9.064458330475], [735538.0, 8.93000030518, 6.792833328247084], [735539.0, 6.80000019073, 7.4734166264529165], [735540.0, 7.4889998436, 8.41433330377], [735541.0, 8.44999980927, 9.947083314259583], [735542.0, 10.0100002289, 11.810416618989999], [735543.0, 11.7700004578, 9.694999972974584], [735544.0, 9.64000034332, 6.763666679461667], [735545.0, 6.632999897, 6.054166644811667], [735546.0, 6.10400009155, 6.797541757424168], [735547.0, 6.8189997673, 4.894541648526459], [735548.0, 4.73000001907, 1.299166673871775], [735549.0, -1.00199997425, 0.026874998738976252], [735550.0, 0.0390000008047, 0.5862916732825293], [735551.0, 0.65600001812, 4.353541627525833], [735552.0, 4.27799987793, -1.525666677121814], [735553.0, -1.65600001812, -2.752124975124558], [735554.0, -2.7650001049, -1.9067917006712918], [735555.0, -1.875, -0.950291668375125], [735556.0, -0.887000024319, 3.060958330246711], [735557.0, 3.1740000248, 6.136291662851249], [735558.0, 6.17100000381, 6.987208346529584], [735559.0, 7.08799982071, 6.278333326180417], [735560.0, 6.15500020981, 6.170583347480417], [735561.0, 6.20800018311, 6.623083333174166], [735562.0, 6.63500022888, 9.726666629313334], [735563.0, 9.77000045776, 9.130208333333334], [735564.0, 9.11999988556, 8.463541666667084], [735565.0, 8.47999954224, 8.387750029564167], [735566.0, 8.31999969482, 2.4285416795557087], [735567.0, 2.24900007248, -1.1773749999703333], [735568.0, -1.14600002766, 0.8217916535218418], [735569.0, 0.899999976158, 4.4653749863300005], [735570.0, 4.49100017548, 5.069833318392083], [735571.0, 5.09700012207, 6.442166626454584], [735572.0, 6.48400020599, 6.906249980132084], [735573.0, 6.94099998474, 6.875708371400833], [735574.0, 6.72800016403, 4.1439999938015415], [735575.0, 4.23000001907, 6.055041660864583], [735576.0, 6.05700016022, 7.514916678269583], [735577.0, 7.57299995422, 7.964833339055834], [735578.0, 7.95399999619, 7.765416701633334], [735579.0, 7.72800016403, 6.3057500024641655], [735580.0, 6.21299982071, 3.6896666934094164], [735581.0, 3.55999994278, 0.20916666548401666], [735582.0, 0.259999990463, 3.4938750316704166], [735583.0, 3.56900000572, 4.35483332475], [735584.0, 4.34600019455, 4.248083303372083], [735585.0, 4.25400018692, 5.736124992370833], [735586.0, 5.79500007629, 5.6924583514541665], [735587.0, 5.65299987793, 6.07591666778125], [735588.0, 6.23600006104, 9.706249992048749], [735589.0, 9.61999988556, 7.9650000333775], [735590.0, 7.91900014877, 7.839541693528333], [735591.0, 7.90700006485, 4.369083384673334], [735592.0, 4.22499990463, 2.7352083474400004], [735593.0, 2.7349998951, 2.7195833226045836], [735594.0, 2.69499993324, 0.9452916681772501], [735595.0, 0.958000004292, 2.2115416626132083], [735596.0, 2.21399998665, -0.03220832052922499], [735597.0, -0.170000001788, -4.3979583779962494], [735598.0, -4.53800010681, -4.722958336273333], [735599.0, -4.60300016403, -2.579791645207917], [735600.0, -2.52600002289, -1.5765000159555], [735601.0, -1.5379999876, -0.2733333331217083], [735602.0, -0.287000000477, 0.8817916653738916], [735603.0, 0.929000020027, 1.7747916777929167], [735604.0, 1.76499998569, 1.9190833178582853], [735605.0, 1.86800003052, 1.188124994437125], [735606.0, 1.19599997997, 1.8930833417305166], [735607.0, 1.92700004578, 2.8179583276307913], [735608.0, 2.81399989128, 3.5776250337555004], [735609.0, 3.66700005531, 5.260166664917917], [735610.0, 5.26800012589, 5.955333391825417], [735611.0, 5.95900011063, 3.3985833423206127], [735612.0, 3.21900010109, 0.6964583372078126], [735613.0, 0.675999999046, 2.25849999984175], [735614.0, 2.40899991989, 5.9321666459237505], [735615.0, 5.82800006866, 4.8017916282025], [735616.0, 4.99900007248, 7.1999167005225], [735617.0, 7.08900022507, 4.380291678632833], [735618.0, 4.28900003433, 1.25491668842745], [735619.0, 1.22500002384, 1.4272083030081957], [735620.0, 1.50499999523, 4.716833333172917], [735621.0, 4.77699995041, 6.338083386420418], [735622.0, 6.41800022125, 7.353791693845417], [735623.0, 7.35799980164, 6.36133331060125], [735624.0, 6.31799983978, 5.798666646081251], [735625.0, 5.75, 4.84254164000375], [735626.0, 4.95499992371, 6.1913750072300004], [735627.0, 6.13100004196, 5.445166707037917], [735628.0, 5.4439997673, 3.3403333211323836], [735629.0, 3.30900001526, 2.251249979871392], [735630.0, 2.31900000572, 4.48100000619875], [735631.0, 4.55200004578, 7.799625019226249], [735632.0, 7.8189997673, 7.272375007470834], [735633.0, 7.29500007629, 7.83525002002875], [735634.0, 7.83099985123, 7.429541687170833], [735635.0, 7.48600006104, 8.1968750357625], [735636.0, 8.18000030518, 8.32329157988125], [735637.0, 8.34000015259, 7.770958344140833], [735638.0, 7.75299978256, 7.006249964237083], [735639.0, 7.00299978256, 7.1658333738658335], [735640.0, 7.12799978256, 6.250375052293333], [735641.0, 6.2389998436, 5.940875033536666], [735642.0, 5.96099996567, 6.609166622164584], [735643.0, 6.66499996185, 5.81783326466375], [735644.0, 5.74700021744, 4.4537499792232005], [735645.0, 4.42999982834, 4.1431250255559045], [735646.0, 4.13000011444, 4.534083262088775], [735647.0, 4.54699993134, 5.140916693956417], [735648.0, 5.21700000763, 6.984041680894166], [735649.0, 6.88800001144, 5.9001666605487495], [735650.0, 5.92999982834, 4.6655833820525], [735651.0, 4.60799980164, 3.6408332871864997], [735652.0, 3.64199995995, 2.627958334981125], [735653.0, 2.50600004196, 2.114000005026167], [735654.0, 2.13899993896, 3.3087083597962503], [735655.0, 3.44600009918, 5.50741660595]]}, "id": "el860394374996496"});
            })
         });
}
</script>

I put together a quick regression to test the correlation between these two data sets. The R-squared between the two is 0.91, regressing the daily data logger mean onto the hourly data averaged to the daily mean.

Although air temperature cannot stand in as a proxy for the other measurements we do not have the ability to compare, we can say from this that there appears to be a reasonable correlation between the values generated from the averaging of the 24 hourly means to those from the daily mean.

The next section of this is the Python code used to compute these values and generate these graphs. If you are not interested in the code, this is all you need read!

CODE TO GET THE MEANS
--------------------

        import pymssql
        import csv
        import numpy
        import math
        import datetime
        import yaml
        import xtempx

        def form_connection():
            """
            connects to the METDAT database to gather the data
            returns a cursor
            """

            # Connect to MSSQL Server
            conn = pymssql.connect(server="",
                                   user="",
                                   password="",
                                   database="")

            # Create a database cursor
            cursor = conn.cursor()

            return cursor


        def query_air(cursor):
            ''' Query used to get from database the hourly means for air temp and relhums that match with them'''

            query2 = """ select \
            datepart(year, metdat.dbo.PRIM_226_table115.TmStamp) as Y, \
            datepart(month,metdat.dbo.PRIM_226_table115.TmStamp) as M, \
            datepart(day, metdat.dbo.PRIM_226_table115.TmStamp) as D, \
            datepart(hour, metdat.dbo.PRIM_226_table115.TmStamp) as H,\
            AVG(metdat.dbo.PRIM_226_table115.Air_450_AVG),\
            AVG(RH.RH_450_Avg) as RELATIVE_HUMIDITY \
            from metdat.dbo.PRIM_226_table115 \
            join metdat.dbo.prim_226_table160 as RH \
            on metdat.dbo.prim_226_table115.TmStamp = RH.TmStamp \
            where metdat.dbo.prim_226_table115.TmStamp >='2014-02-12' \
            and metdat.dbo.prim_226_table115.TmStamp <='2015-03-18' \
            group by datepart(year, metdat.dbo.prim_226_table115.TmStamp), \
            datepart(month, metdat.dbo.prim_226_table115.TmStamp), \
            datepart(day, metdat.dbo.prim_226_table115.TmStamp), \
            datepart(hour, metdat.dbo.prim_226_table115.TmStamp)"""


            cursor.execute(query2)

            return cursor

        def iterate_over_the_cursor(cursor):
            '''get the hourly temperatures and store in a temporary dictionary'''
            
            query_air(cursor)

            # blank dictionaries
            od_vpd = {}
            od_air = {}
            od_rel = {}
            od_dew = {}

            # iterate over cursor
            for row in cursor:

                # bring in the data as strings
                year = str(row[0])
                month = str(row[1])
                day = str(row[2])
                hour = str(row[3])
                # limit to first seven chars?
                air = str(row[4])
                rh = str(row[5])

                # date-time to the hour is indexed to the values
                dt = datetime.datetime(int(year), int(month), int(day), int(hour), 0)
                       
                # if dew is not existant, calculate it! (it will be calcualted every time in this case because whole logger is missing!)
                if dt not in od_dew:
                    try:
                        od_dew[dt] = dewpt(satvp(float(air)), float(rh))
                    except Exception:
                        od_dew[dt] = "None"
                        print "rh is %s" %rh
                        print "air is %s" %air
                        pass
                elif dt in od_dew:
                    print "this should never be called"

                # if vpd is not existant, calculate it
                if dt not in od_vpd:
                    try:
                        od_vpd[dt] = vaporpresd(float(rh), satvp(float(air)))
                    except Exception:
                        od_vpd[dt] = "None"
                        print "rh is %s" %rh
                        print "air is %s" %air
                        pass
                
                # if vpd exists, pass
                elif dt in od_vpd:
                    print "this should never be called"
                    pass

                # go ahead and do relative humidity and air temp as comparison
                if dt not in od_rel:
                    try:
                        od_rel[dt] = float(rh)
                    except Exception:
                        od_rel[dt] = "None"
                        print "rh is %s" %rh
                        print "air is %s" %air
                        pass

                elif dt in od_rel:
                    print "this should never be called"
                    pass

                # go ahead and do air temp as a comparison
                if dt not in od_air:
                    try:
                        od_air[dt] = float(air)
                    except Exception:
                        od_air[dt] = "None"
                        print "rh is %s" %rh
                        print "air is %s" %air
                        pass
                elif dt in od_air:
                    print "this should never be called"
                    pass


            return od_air, od_rel, od_dew, od_vpd

        def min_max_h(one_dictionary):
            ''' makes max time and min time dictionaries'''

            # dictionaries for max values and min values
            max_val = {}

            min_val = {}

            # for every day, get the date and the hour
            for each_key in one_dictionary.keys():

                # the date time module parses the date time
                dt = datetime.datetime(each_key.year, each_key.month, each_key.day)
                h = int(each_key.hour)

                # if the date is empty put in the first value
                if dt not in max_val:
                    max_val[dt] = [h, one_dictionary[each_key]]

                # if the date is not empty, test that the new value is > the first value, if it is add it, if not, pass through
                elif dt in max_val:
                    if max_val[dt][1] < one_dictionary[each_key]:
                        pass
                    elif max_val[dt][1] >= one_dictionary[each_key]:
                        max_val[dt] = [h, one_dictionary[each_key]]

            
            # for every day get the date and hour
            for each_key in one_dictionary.keys():

                # the date time module parses the date time
                dt = datetime.datetime(each_key.year, each_key.month, each_key.day)
                h = int(each_key.hour)

                # if the date is empty, add the value
                if dt not in min_val:
                    min_val[dt] = [h, one_dictionary[each_key]]

                # if it is not empty, test if you have the min value, otherwise pass through it
                elif dt in min_val:
                    if min_val[dt][1] >= one_dictionary[each_key]:
                        pass
                    elif min_val[dt][1] < one_dictionary[each_key]:
                        min_val[dt] = [h, one_dictionary[each_key]]

            return max_val, min_val


        def drange(start, stop, step):
                """ define an interval range over which to iterate
                final arguement can let you iterate with a jump
                that is not 1 (i.e. 10 or 0.4)

                for example:
                thisrange = drange(0.0, 250.0, 0.1)
                here's how to see the whole range
                ranger = [round(x,2) for x in thisrange]

                THIS IS GOD'S FUNCTION.
                """

                r = start
                while r < stop:
                    yield r
                    r+=step


        def dewpt(SatVP, RH):
            ''' Calculates dew point from saturated vapor pressure and relative humidity based on the formula from Chris Daly/ NOAA. Returns None if it can't be done with the given info'''

            try:
                Td = 237.3*math.log(SatVP*float(RH)/611.)/(7.5*math.log(10)-math.log(SatVP*float(RH)/float(611.)))
                return Td
            except Exception:
                Td = None
                return Td


        def satvp(Ta):
            ''' Calculates saturated vapor pressure based on air temperature'''

            SatVP = 6.1094*math.exp((17.625*float(Ta))/(243.04+float(Ta)))
            return SatVP

        def vaporpresd(RH, SatVP):
            ''' Calculates vapor pressure defecit based on relative humidity and saturated vapor pressure'''
            try:
                vpd = ((100-RH)*0.01)*float(SatVP)
                #vap = float(RH)*0.01*float(SatVP)
                return vpd
            except Exception:
                vpd = None
                return vpd

            
        def daily_resolve(od_air, od_rel, od_dew, od_vpd):
            ''' 
            Resolves daily means and does the flags.
            Each value is appended to a map for the day like 2014-02-12: [5, 6, 7, 2, etc.]
            The mean of the values are computed.
            The number of Nones or Nulls etc. in the values is counted
            The number of values is counted
            The number of values which fall outside the questionable bounds are counted.
            The appropriate flag is assigned. 
            The flag is propogated to dewpoint and vaporpressure as is appropriate.

            '''
            
            air_val = {}
            rel_val = {}
            dew_val = {}
            vpd_val = {}

            air_flag = {}
            rel_flag = {}
            dew_flag = {}
            vpd_flag = {}

            # iterate over the days
            for dt in sorted(od_air.keys()):
                
                d = datetime.datetime(dt.year, dt.month, dt.day)

                # if the day is not mapped, add it in... for air, rel, dew, vpd
                if d not in air_val:
                    air_val[d] = []
                    air_val[d].append(od_air[dt])
                else:
                    air_val[d].append(od_air[dt])
                    
                # for relative humidity
                if d not in rel_val:
                    rel_val[d] = []
                    rel_val[d].append(od_rel[dt])
                else:
                    rel_val[d].append(od_rel[dt])

                # for dew point
                if d not in dew_val:
                    dew_val[d] = []
                    dew_val[d].append(od_dew[dt])
                else:
                    dew_val[d].append(od_dew[dt])

                # for vpd
                if d not in vpd_val:
                    vpd_val[d] = []
                    vpd_val[d].append(od_vpd[dt])
                else:
                    vpd_val[d].append(od_vpd[dt])

                # assign a blank placeholder for the flag character for now
                air_flag[d] = ''
                rel_flag[d] = ''
                dew_flag[d] = ''
                vpd_flag[d] = ''

            # flagging is implemented here:
            for ds in air_val.keys():
                # determine the length of each day (number obs)
                length_values = len([x for x in air_val[ds]])
                # determine the number of nulls
                data_null = [x for x in air_val[ds] if x == None or x == "None"]
                # determine the number of questionables
                data_q = [x for x in air_val[ds] if x <-20. or x > 45.]
                # get the valid data
                data = [x for x in air_val[ds] if x != "None" and x != None and x > -30. and x < 45.]

                # if there are any missing values at all
                if data_null != []:
                    
                    # if more than 5% of the day is missing the day is missing
                    if float(len(data_null))/float(length_values) > 0.05:
                        air_flag.update({ds:'M'})
                        air_val.update({ds:"None"})
                    
                    # if more than 5 percent of the day is missing or questionable the day is questionable
                    elif (float(len(data_null))+float(len(data_q)))/float(length_values) > 0.05:
                        air_flag.update({ds:'Q'})
                        air_val.update({ds:numpy.nanmean(data)})
                    
                    # if less than 5 % missing or questionable it's ok
                    else:
                        air_flag.update({ds:'A'})
                        air_val.update({ds:numpy.nanmean(data)})
                
                # if there are not missing values
                elif data_null == []:
                    
                    # if more than 5% is questionable the day is questionable
                    if float(len(data_q))/float(length_values) > 0.05:
                        air_flag.update({ds:'Q'})
                        air_val.update({ds:numpy.nanmean(data)})
                    else:
                        air_flag.update({ds:'A'})
                        air_val.update({ds:numpy.nanmean(data)})

            # relative humidity: 
            for ds in rel_val.keys():
                length_values = len([x for x in rel_val[ds]])
                data_null = [x for x in rel_val[ds] if x == None or x == "None"]
                data_q = [x for x in rel_val[ds] if x <-5. or x > 105.]
                data = [x for x in rel_val[ds] if x != "None" and x != None and x > -1. and x < 101.]


                # same procedure as above
                if data_null != []:
                    if float(len(data_null))/float(length_values) > 0.05:
                        rel_flag.update({ds:'M'})
                        rel_val.update({ds:"None"})
                    elif (float(len(data_null))+float(len(data_q)))/float(length_values) > 0.05:
                        rel_flag.update({ds:'Q'})
                        rel_val.update({ds:numpy.nanmean(data)})
                    else:
                        rel_flag.update({ds:'A'})
                        rel_val.update({ds:numpy.nanmean(data)})
                
                elif data_null == []:
                    
                    if float(len(data_q))/float(length_values) > 0.05:
                        rel_flag.update({ds:'Q'})
                        rel_val.update({ds:numpy.nanmean(data)})
                    else:
                        rel_flag.update({ds:'A'})
                        rel_val.update({ds:numpy.nanmean(data)})


            # dew point, same procedure as above
            for ds in dew_val.keys():
                length_values = len([x for x in dew_val[ds]])
                data_null = [x for x in dew_val[ds] if x == None or x == "None"]
                data_q = [x for x in dew_val[ds] if x <-20. or x > 45.]
                data = [x for x in dew_val[ds] if x != "None" and x != None and x > -30. and x < 45.]

                if data_null != []:
                    if float(len(data_null))/float(length_values) > 0.05:
                        dew_flag.update({ds:'M'})
                        dew_val.update({ds:"None"})
                    elif air_flag[ds] == 'M' or rel_flag[ds] =='M':
                        dew_flag.update({ds:'M'})
                        dew_val.update({ds:"None"})
                    elif air_flag[ds] == 'Q' or rel_flag[ds] == "Q":
                        dew_flag.update({ds:'Q'})
                        dew_val.update({ds:numpy.nanmean(data)})
                    elif (float(len(data_null))+float(len(data_q)))/float(length_values) > 0.05:
                        dew_flag.update({ds:'Q'})
                        dew_val.update({ds:numpy.nanmean(data)})
                    else:
                        dew_flag.update({ds:'A'})
                        dew_val.update({ds:numpy.nanmean(data)})
                
                elif data_null == []:
                    
                    if air_flag[ds] == 'M' or rel_flag[ds] =='M':
                        dew_flag.update({ds:'M'})
                        dew_val.update({ds:"None"})
                    elif air_flag[ds] == 'Q' or rel_flag[ds] == "Q":
                        dew_flag.update({ds:'Q'})
                    else:
                        dew_flag.update({ds:'A'})
                        dew_val.update({ds:numpy.nanmean(data)})

            # vpd, same procedure as above
            for ds in vpd_val.keys():
                data = [x for x in vpd_val[ds] if x != "None" and x != None and x > -5. and x < 105.]
                length_values = len([x for x in vpd_val[ds]])
                data_null = [x for x in vpd_val[ds] if x == None or x == "None"]
                data_q = [x for x in vpd_val[ds] if x <-5. or x > 105.]
            
                if data_null != []:
                    if float(len(data_null))/float(length_values) > 0.05:
                        vpd_flag.update({ds:'M'})
                        vpd_val.update({ds:"None"})
                    elif air_flag[ds] == 'M' or rel_flag[ds] =='M':
                        vpd_flag.update({ds:'M'})
                        vpd_val.update({ds:"None"})
                    elif air_flag[ds] == 'Q' or rel_flag[ds] == "Q":
                        vpd_flag.update({ds:'Q'})
                        vpd_val.update({ds:numpy.nanmean(data)})
                    elif (float(len(data_null))+float(len(data_q)))/float(length_values) > 0.05:
                        vpd_flag.update({ds:'Q'})
                        vpd_val.update({ds:numpy.nanmean(data)})
                    else:
                        vpd_flag.update({ds:'A'})
                        vpd_val.update({ds:numpy.nanmean(data)})
                
                elif data_null == []:
                    
                    if air_flag[ds] == 'M' or rel_flag[ds] =='M':
                        vpd_flag.update({ds:'M'})
                        vpd_val.update({ds:"None"})
                    elif air_flag[ds] == 'Q' or rel_flag[ds] == "Q":
                        vpd_flag.update({ds:'Q'})
                    else:
                        vpd_flag.update({ds:'A'})
                        vpd_val.update({ds:numpy.nanmean(data)})

            return air_val, air_flag, rel_val, rel_flag, dew_val, dew_flag, vpd_val, vpd_flag


        # same method for max and min:
        def daily_resolve_max(od_air, od_rel, od_dew, od_vpd):
            ''' Resolve daily maxs '''

            air_val2 = {}
            rel_val2 = {}
            dew_val2 = {}
            vpd_val2 = {}

            air_flag2 = {}
            rel_flag2 = {}
            dew_flag2 = {}
            vpd_flag2 = {}

            for dt in sorted(od_air.keys()):
                
                d = datetime.datetime(dt.year, dt.month, dt.day)
                h = dt.hour

                if d not in air_val2:
                    air_val2[d] = []
                    air_val2[d].append(od_air[dt])
                else:
                    air_val2[d].append(od_air[dt])

                if d not in rel_val2:
                    rel_val2[d] = []
                    rel_val2[d].append(od_rel[dt])
                else:
                    rel_val2[d].append(od_rel[dt])

                if d not in dew_val2:
                    dew_val2[d] = []
                    dew_val2[d].append(od_dew[dt])
                else:
                    dew_val2[d].append(od_dew[dt])

                if d not in vpd_val2:
                    vpd_val2[d] = []
                    vpd_val2[d].append(od_vpd[dt])
                else:
                    vpd_val2[d].append(od_vpd[dt])


                air_flag2[d] = ''
                rel_flag2[d] = ''
                dew_flag2[d] = ''
                vpd_flag2[d] = ''

            
            for ds in air_val2.keys():
                length_values = len([x for x in air_val2[ds]])
                data_null = [x for x in air_val2[ds] if x == None or x == "None"]
                data_q = [x for x in air_val2[ds] if x <-20. or x > 45.]
                data = [x for x in air_val2[ds] if x != "None" and x != None and x > -30. and x < 45.]

                if data_null != []:
                    if float(len(data_null))/float(length_values) > 0.05:
                        air_flag2.update({ds:'M'})
                        air_val2.update({ds:"None"})
                    elif (float(len(data_null))+float(len(data_q)))/float(length_values) > 0.05:
                        air_flag2.update({ds:'Q'})
                        air_val2.update({ds:numpy.max(data)})
                    else:
                        air_flag2.update({ds:'A'})
                        air_val2.update({ds:numpy.max(data)})
                
                elif data_null == []:
                    
                    if float(len(data_q))/float(length_values) > 0.05:
                        air_flag2.update({ds:'Q'})
                        air_val2.update({ds:numpy.max(data)})
                    else:
                        air_flag2.update({ds:'A'})
                        print data
                        air_val2.update({ds:numpy.max(data)})

            for ds in rel_val2.keys():
                length_values = len([x for x in rel_val2[ds]])
                data_null = [x for x in rel_val2[ds] if x == None or x == "None"]
                data_q = [x for x in rel_val2[ds] if x <-5. or x > 105.]
                data = [x for x in rel_val2[ds] if x != "None" and x != None and x > -1. and x < 101.]

                if data_null != []:
                    if float(len(data_null))/float(length_values) > 0.05:
                        rel_flag2.update({ds:'M'})
                        rel_val2.update({ds:"None"})
                    elif (float(len(data_null))+float(len(data_q)))/float(length_values) > 0.05:
                        rel_flag2.update({ds:'Q'})
                        rel_val2.update({ds:numpy.max(data)})
                    else:
                        rel_flag2.update({ds:'A'})
                        rel_val2.update({ds:numpy.max(data)})
                
                elif data_null == []:
                    
                    if float(len(data_q))/float(length_values) > 0.05:
                        rel_flag2.update({ds:'Q'})
                        rel_val2.update({ds:numpy.max(data)})
                    else:
                        rel_flag2.update({ds:'A'})
                        rel_val2.update({ds:numpy.max(data)})

            for ds in dew_val2.keys():
                length_values = len([x for x in dew_val2[ds]])
                data_null = [x for x in dew_val2[ds] if x == None or x == "None"]
                data_q = [x for x in dew_val2[ds] if x <-20. or x > 45.]
                data = [x for x in dew_val2[ds] if x != "None" and x != None and x > -30. and x < 45.]

                if data_null != []:
                    if float(len(data_null))/float(length_values) > 0.05:
                        dew_flag2.update({ds:'M'})
                        dew_val2.update({ds:"None"})
                    elif air_flag2[ds] == 'M' or rel_flag2[ds] =='M':
                        dew_flag2.update({ds:'M'})
                        dew_val2.update({ds:"None"})
                    elif air_flag2[ds] == 'Q' or rel_flag2[ds] == "Q":
                        dew_flag2.update({ds:'Q'})
                        dew_val2.update({ds:numpy.max(data)})
                    elif (float(len(data_null))+float(len(data_q)))/float(length_values) > 0.05:
                        dew_flag2.update({ds:'Q'})
                        dew_val2.update({ds:numpy.max(data)})
                    else:
                        dew_flag2.update({ds:'A'})
                        dew_val2.update({ds:numpy.max(data)})
                
                elif data_null == []:
                    
                    if air_flag2[ds] == 'M' or rel_flag2[ds] =='M':
                        dew_flag2.update({ds:'M'})
                        dew_val2.update({ds:"None"})
                    elif air_flag2[ds] == 'Q' or rel_flag2[ds] == "Q":
                        dew_flag2.update({ds:'Q'})
                    else:
                        dew_flag2.update({ds:'A'})
                        dew_val2.update({ds:numpy.max(data)})

            for ds in vpd_val2.keys():
                data = [x for x in vpd_val2[ds] if x != "None" and x != None and x > -5. and x < 105.]
                length_values = len([x for x in vpd_val2[ds]])
                data_null = [x for x in vpd_val2[ds] if x == None or x == "None"]
                data_q = [x for x in vpd_val2[ds] if x <-5. or x > 105.]
            
                if data_null != []:
                    if float(len(data_null))/float(length_values) > 0.05:
                        vpd_flag2.update({ds:'M'})
                        vpd_val2.update({ds:"None"})
                    elif air_flag2[ds] == 'M' or rel_flag2[ds] =='M':
                        vpd_flag2.update({ds:'M'})
                        vpd_val2.update({ds:"None"})
                    elif air_flag2[ds] == 'Q' or rel_flag2[ds] == "Q":
                        vpd_flag2.update({ds:'Q'})
                        vpd_val2.update({ds:numpy.max(data)})
                    elif (float(len(data_null))+float(len(data_q)))/float(length_values) > 0.05:
                        vpd_flag2.update({ds:'Q'})
                        vpd_val2.update({ds:numpy.max(data)})
                    else:
                        vpd_flag2.update({ds:'A'})
                        vpd_val2.update({ds:numpy.max(data)})
                
                elif data_null == []:
                    
                    if air_flag2[ds] == 'M' or rel_flag2[ds] =='M':
                        vpd_flag2.update({ds:'M'})
                        vpd_val2.update({ds:"None"})
                    elif air_flag2[ds] == 'Q' or rel_flag2[ds] == "Q":
                        vpd_flag2.update({ds:'Q'})
                    else:
                        vpd_flag2.update({ds:'A'})
                        vpd_val2.update({ds:numpy.max(data)})

            return air_val2, air_flag2, rel_val2, rel_flag2, dew_val2, dew_flag2, vpd_val2, vpd_flag2

        def daily_resolve_min(od_air, od_rel, od_dew, od_vpd):

            air_val3 = {}
            rel_val3 = {}
            dew_val3 = {}
            vpd_val3 = {}

            air_flag3 = {}
            rel_flag3 = {}
            dew_flag3 = {}
            vpd_flag3 = {}

            for dt in sorted(od_air.keys()):
                
                d = datetime.datetime(dt.year, dt.month, dt.day)

                if d not in air_val3:
                    air_val3[d] = []
                    air_val3[d].append(od_air[dt])
                else:
                    air_val3[d].append(od_air[dt])

                if d not in rel_val3:
                    rel_val3[d] = []
                    rel_val3[d].append(od_rel[dt])
                else:
                    rel_val3[d].append(od_rel[dt])

                if d not in dew_val3:
                    dew_val3[d] = []
                    dew_val3[d].append(od_dew[dt])
                else:
                    dew_val3[d].append(od_dew[dt])

                if d not in vpd_val3:
                    vpd_val3[d] = []
                    vpd_val3[d].append(od_vpd[dt])
                else:
                    vpd_val3[d].append(od_vpd[dt])


                air_flag3[d] = ''
                rel_flag3[d] = ''
                dew_flag3[d] = ''
                vpd_flag3[d] = ''


            print air_val3.items()[1:10]
            
            for ds in air_val3.keys():
                length_values = len([x for x in air_val3[ds]])
                data_null = [x for x in air_val3[ds] if x == None or x == "None"]
                data_q = [x for x in air_val3[ds] if x <-20. or x > 45.]
                data = [x for x in air_val3[ds] if x != "None" and x != None and x > -30. and x < 45.]

                if data_null != []:
                    if float(len(data_null))/float(length_values) > 0.05:
                        air_flag3.update({ds:'M'})
                        air_val3.update({ds:"None"})
                    elif (float(len(data_null))+float(len(data_q)))/float(length_values) > 0.05:
                        air_flag3.update({ds:'Q'})
                        air_val3.update({ds:numpy.min(data)})
                    else:
                        air_flag3.update({ds:'A'})
                        air_val3.update({ds:numpy.min(data)})
                
                elif data_null == []:
                    
                    if float(len(data_q))/float(length_values) > 0.05:
                        air_flag3.update({ds:'Q'})
                        air_val3.update({ds:numpy.min(data)})
                    else:
                        air_flag3.update({ds:'A'})
                        air_val3.update({ds:numpy.min(data)})

            for ds in rel_val.keys():
                length_values = len([x for x in rel_val3[ds]])
                data_null = [x for x in rel_val3[ds] if x == None or x == "None"]
                data_q = [x for x in rel_val3[ds] if x <-5. or x > 105.]
                data = [x for x in rel_val3[ds] if x != "None" and x != None and x > -1. and x < 101.]

                if data_null != []:
                    if float(len(data_null))/float(length_values) > 0.05:
                        rel_flag3.update({ds:'M'})
                        rel_val3.update({ds:"None"})
                    elif (float(len(data_null))+float(len(data_q)))/float(length_values) > 0.05:
                        rel_flag3.update({ds:'Q'})
                        rel_val3.update({ds:numpy.min(data)})
                    else:
                        rel_flag3.update({ds:'A'})
                        rel_val3.update({ds:numpy.min(data)})
                
                elif data_null == []:
                    
                    if float(len(data_q))/float(length_values) > 0.05:
                        rel_flag3.update({ds:'Q'})
                        rel_val3.update({ds:numpy.min(data)})
                    else:
                        rel_flag3.update({ds:'A'})
                        rel_val3.update({ds:numpy.min(data)})

            for ds in dew_val3.keys():
                length_values = len([x for x in dew_val3[ds]])
                data_null = [x for x in dew_val3[ds] if x == None or x == "None"]
                data_q = [x for x in dew_val3[ds] if x <-20. or x > 45.]
                data = [x for x in dew_val3[ds] if x != "None" and x != None and x > -30. and x < 45.]

                if data_null != []:
                    if float(len(data_null))/float(length_values) > 0.05:
                        dew_flag3.update({ds:'M'})
                        dew_val3.update({ds:"None"})
                    elif air_flag3[ds] == 'M' or rel_flag3[ds] =='M':
                        dew_flag3.update({ds:'M'})
                        dew_val3.update({ds:"None"})
                    elif air_flag3[ds] == 'Q' or rel_flag3[ds] == "Q":
                        dew_flag3.update({ds:'Q'})
                        dew_val3.update({ds:numpy.min(data)})
                    elif (float(len(data_null))+float(len(data_q)))/float(length_values) > 0.05:
                        dew_flag3.update({ds:'Q'})
                        dew_val3.update({ds:numpy.min(data)})
                    else:
                        dew_flag3.update({ds:'A'})
                        dew_val3.update({ds:numpy.min(data)})
                
                elif data_null == []:
                    
                    if air_flag3[ds] == 'M' or rel_flag3[ds] =='M':
                        dew_flag3.update({ds:'M'})
                        dew_val3.update({ds:"None"})
                    elif air_flag3[ds] == 'Q' or rel_flag3[ds] == "Q":
                        dew_flag3.update({ds:'Q'})
                    else:
                        dew_flag3.update({ds:'A'})
                        dew_val3.update({ds:numpy.min(data)})

            for ds in vpd_val3.keys():
                data = [x for x in vpd_val3[ds] if x != "None" and x != None and x > -5. and x < 105.]
                length_values = len([x for x in vpd_val3[ds]])
                data_null = [x for x in vpd_val3[ds] if x == None or x == "None"]
                data_q = [x for x in vpd_val3[ds] if x <-5. or x > 105.]
            
                if data_null != []:
                    if float(len(data_null))/float(length_values) > 0.05:
                        vpd_flag3.update({ds:'M'})
                        vpd_val3.update({ds:"None"})
                    elif air_flag3[ds] == 'M' or rel_flag3[ds] =='M':
                        vpd_flag3.update({ds:'M'})
                        vpd_val3.update({ds:"None"})
                    elif air_flag3[ds] == 'Q' or rel_flag3[ds] == "Q":
                        vpd_flag3.update({ds:'Q'})
                        vpd_val3.update({ds:numpy.min(data)})
                    elif (float(len(data_null))+float(len(data_q)))/float(length_values) > 0.05:
                        vpd_flag3.update({ds:'Q'})
                        vpd_val3.update({ds:numpy.min(data)})
                    else:
                        vpd_flag3.update({ds:'A'})
                        vpd_val3.update({ds:numpy.min(data)})
                
                elif data_null == []:
                    
                    if air_flag3[ds] == 'M' or rel_flag3[ds] =='M':
                        vpd_flag3.update({ds:'M'})
                        vpd_val3.update({ds:"None"})
                    elif air_flag3[ds] == 'Q' or rel_flag3[ds] == "Q":
                        vpd_flag3.update({ds:'Q'})
                    else:
                        vpd_flag3.update({ds:'A'})
                        vpd_val3.update({ds:numpy.min(data)})

            return air_val3, air_flag3, rel_val3, rel_flag3, dew_val3, dew_flag3, vpd_val3, vpd_flag3

        def fill_gaps_in_dt(attribute, isflag):
            ''' each data set may be missing some dates '''
            
            gapfiller = drange(datetime.datetime(2014,2,12,0,0), datetime.datetime(2015,3,18,0,0), datetime.timedelta(minutes=1440))
            
            # the intersection of the perfect date range and the real date range
            remaining = list(set([x for x in gapfiller]) -set(attribute.keys()))
                
            if remaining != []:
                # if the column is not a flag column, put in "none" for missing values
                if isflag == "F":
                    attribute.update({remaining[x]:"None" for x,_ in enumerate(remaining)})

                # if the column is a flag column put in "M" for the missing data
                elif isflag == "T":
                    attribute.update({remaining[x]:"M" for x,_ in enumerate(remaining)})
            else:
                pass

            return attribute

        def all_max(od_air, od_rel, od_dew, od_vpd):
            '''compute all minimum and maximum hours with results of day: [hour,val] '''
            # min and max of air, rel, dew, and vpd
            ma, na = min_max_h(od_air)
            mr, nr = min_max_h(od_rel)
            md, nd = min_max_h(od_dew)
            mv, nv = min_max_h(od_vpd)

            return ma, na, mr, nr, md, nd, mv, nv

        if __name__ == "__main__":

            # main script is running here, connect to server and gather the data
            c = form_connection()
            v,vv,vvv,vvvv = iterate_over_the_cursor(c)
            air_val, air_flag, rel_val, rel_flag, dew_val, dew_flag, vpd_val, vpd_flag = daily_resolve(v,vv,vvv,vvvv)
            air_val2, air_flag2, rel_val2, rel_flag2, dew_val2, dew_flag2, vpd_val2, vpd_flag2 = daily_resolve_max(v,vv,vvv,vvvv)
            air_val3, air_flag3, rel_val3, rel_flag3, dew_val3, dew_flag3, vpd_val3, vpd_flag3 = daily_resolve_min(v,vv,vvv,vvvv)

            # gap fill on air, rel, dewpt, vpd
            air_val = fill_gaps_in_dt(air_val,"F")
            air_flag = fill_gaps_in_dt(air_flag,"T")
            air_val2 = fill_gaps_in_dt(air_val2,"F")
            air_flag2 = fill_gaps_in_dt(air_flag2,"T")
            air_val3 = fill_gaps_in_dt(air_val3,"F")
            air_flag3 = fill_gaps_in_dt(air_flag3,"T")

            rel_val = fill_gaps_in_dt(rel_val,"F")
            rel_flag = fill_gaps_in_dt(rel_flag,"T")
            rel_val2 = fill_gaps_in_dt(rel_val2,"F")
            rel_flag2 = fill_gaps_in_dt(rel_flag2,"T")
            rel_val3 = fill_gaps_in_dt(rel_val3,"F")
            rel_flag3 = fill_gaps_in_dt(rel_flag3,"T")  

            dew_val = fill_gaps_in_dt(dew_val,"F")
            dew_flag = fill_gaps_in_dt(dew_flag,"T")
            dew_val2 = fill_gaps_in_dt(dew_val2,"F")
            dew_flag2 = fill_gaps_in_dt(dew_flag2,"T")
            dew_val3 = fill_gaps_in_dt(dew_val3,"F")
            dew_flag3 = fill_gaps_in_dt(dew_flag3,"T")         
               

            vpd_val = fill_gaps_in_dt(vpd_val,"F")
            vpd_flag = fill_gaps_in_dt(vpd_flag,"T")
            vpd_val2 = fill_gaps_in_dt(vpd_val2,"F")
            vpd_flag2 = fill_gaps_in_dt(vpd_flag2,"T")
            vpd_val3 = fill_gaps_in_dt(vpd_val3,"F")
            vpd_flag3 = fill_gaps_in_dt(vpd_flag3,"T")

            # compute the min and max times, gap fill
            ma, na, mr, nr, md, nd, mv, nv = all_max(v,vv,vvv,vvvv)

            ma = fill_gaps_in_dt(ma, "F")
            na = fill_gaps_in_dt(na, "F")
            mr = fill_gaps_in_dt(mr, "F")
            nr = fill_gaps_in_dt(nr, "F")
            md = fill_gaps_in_dt(md, "F")
            nd = fill_gaps_in_dt(nd, "F")
            mv = fill_gaps_in_dt(mv, "F")
            nv = fill_gaps_in_dt(nv, "F")

            #write outputs
            with open('MS04301_primet_450.csv','wb') as writefile:
                writer =  writer = csv.writer(writefile,quoting=csv.QUOTE_NONNUMERIC)
            
                writer.writerow(["dbcode","entitycode","sitecode","method","height","qccode",
                "probe_code","date","airtemp_mean_day","flag_airtemp_mean_day","airtemp_max_day"
                "flag_airtemp_max_day", "airtemp_maxtime", "airtemp_min_day","flag_airtemp_min_day"
                "airtemp_min_time","eventcode"])


                for dt in sorted(air_val.keys()):

                    newrow = ["MS04301", "1", "PRIMET","Re-calculated from fifteen minute means", "450", "1D", "AIRPRI01", datetime.datetime.strftime(dt,'%Y-%m-%d %H:%M:%S'), str(air_val[dt])[:6], air_flag[dt], str(air_val2[dt])[:6], air_flag2[dt], na[dt][0], str(air_val3[dt])[:6], air_flag3[dt], ma[dt][0], "NA"]
                    writer.writerow(newrow)


CODE TO GENERATE GRAPHS AND DO R-SQUARED
------------

        #!/usr/bin/python
        # -*- coding: utf-8 -*-

        import datetime
        import csv
        import sql_primet_150
        import mpld3
        import matplotlib.pyplot as plt
        import matplotlib.dates as mdates
        import numpy as np
        import xtempx

        def get_from_sql_primet():
            ''' gets the air temp from sqlprimet150'''

            c = sql_primet_150.form_connection()
            v,_,_,_ = sql_primet_150.iterate_over_the_cursor(c)
            air_val, air_flag,_,_,_,_,_,_ = sql_primet_150.daily_resolve(v,_,_,_)
            
            air_val = sql_primet_150.fill_gaps_in_dt(air_val,"F")
            air_flag = sql_primet_150.fill_gaps_in_dt(air_flag,"T")
            dt_hourly = air_val
            return dt_hourly


        def get_from_xtempx():
            ''' get the corresponding daily air '''

            A = xtempx.QCFactory("primet","airtemp")
            dt_daily = A.loggers['primet']['airtemp'][1]['val']
            return dt_daily

        def pretty_background():
            """ creating background info"""
            # create a plot with as may subplots as you choose
            fig, ax = plt.subplots()
            # add a grid to the background
            ax.grid(True, alpha = 0.2)
            # the x axis contains date
            fig.autofmt_xdate()
            # the dates are year, month
            ax.fmt_xdata = mdates.DateFormatter('%Y-%m')

            return fig, ax

        def compare_air(dt_hourly, dt_daily, fig, ax):
            ''' plot the daily versus the hourly'''
           
            days = [day for day in sorted(dt_hourly.keys()) if dt_hourly[day] != "None" and dt_daily[day] != "None" and dt_hourly[day] != None and dt_daily[day] != None]
            daily = [dt_daily[day] for day in sorted(dt_hourly.keys()) if dt_daily[day] != "None" and dt_daily[day] != None and dt_hourly[day] != "None" and dt_hourly[day] != None]
            hourly = [dt_hourly[day] for day in sorted(dt_hourly.keys()) if dt_hourly[day] != "None" and dt_hourly[day] != None and  dt_daily[day] != "None" and dt_daily[day] != None]

            ax.plot(days, daily, color= "red", label = "daily air")
            ax.plot(days, hourly, color = "blue", label = "hourly avg daily air")
            ax.set_xlabel("days")
            ax.set_ylabel("air temperature in C")
            ax.legend(loc=4)

            mpld3.show()
            mpld3.save_html(fig, "hourly_daily_airtemp_primet450.html")

        def rsquared(dt_hourly, dt_daily):
            """ computes the r-squared on dewpoint and vpd"""
            daily = [float(dt_daily[day]) for day in sorted(dt_hourly.keys()) if dt_daily[day] != "None" and dt_daily[day] != None and dt_hourly[day] != "None" and dt_hourly[day] != None]
            print daily
            hourly = [float(dt_hourly[day]) for day in sorted(dt_hourly.keys()) if dt_hourly[day] != "None" and dt_hourly[day] != None and  dt_daily[day] != "None" and dt_daily[day] != None]  
                
            u = np.poly1d(np.polyfit(daily, hourly,1))
            yhat = u(daily)
            ybar = np.sum(hourly)/len(hourly)
            ssreg = np.sum((yhat-ybar)**2)
            sstot = np.sum((hourly-ybar)**2)
            rsq = ssreg/sstot
            
            print "airtemps rsq: %s" %(rsq)

        if __name__ == "__main__":

            dt_hourly = get_from_sql_primet()
            dt_daily = get_from_xtempx()
            rsquared(dt_hourly, dt_daily)
            fig, ax = pretty_background()
            compare_air(dt_hourly, dt_daily, fig, ax)